<android.app.ActivityManager: android.app.IActivityManager getService()>
<android.app.ActivityManager: int getCurrentUser()>
<android.app.ActivityManager: int getPackageImportance(java.lang.String)>
<android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>
<android.app.ActivityManagerInternal: android.app.ActivityManagerInternal$ServiceNotificationPolicy applyForegroundServiceNotification(android.app.Notification,java.lang.String,int,java.lang.String,int)>
<android.app.ActivityManagerInternal: int getPendingIntentFlags(android.content.IIntentSender)>
<android.app.ActivityManagerInternal: void clearPendingIntentAllowBgActivityStarts(android.content.IIntentSender,android.os.IBinder)>
<android.app.ActivityManagerInternal: void onForegroundServiceNotificationUpdate(boolean,android.app.Notification,int,java.lang.String,int)>
<android.app.ActivityManagerInternal: void setPendingIntentAllowBgActivityStarts(android.content.IIntentSender,android.os.IBinder,int)>
<android.app.ActivityManagerInternal: void setPendingIntentAllowlistDuration(android.content.IIntentSender,android.os.IBinder,long,int,int,java.lang.String)>
<android.app.AlarmManager: void cancel(android.app.PendingIntent)>
<android.app.AlarmManager: void setExactAndAllowWhileIdle(int,long,android.app.PendingIntent)>
<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>
<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>
<android.app.KeyguardManager: boolean isDeviceLocked(int)>
<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()>
<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()>
<android.app.Notification$BigTextStyle: java.lang.CharSequence getBigText()>
<android.app.Notification$BubbleMetadata: android.app.PendingIntent getIntent()>
<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressable()>
<android.app.Notification$BubbleMetadata: boolean isNotificationSuppressed()>
<android.app.Notification$BubbleMetadata: int getFlags()>
<android.app.Notification$BubbleMetadata: java.lang.String getShortcutId()>
<android.app.Notification$BubbleMetadata: void setFlags(int)>
<android.app.Notification$Builder: android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification)>
<android.app.Notification$Builder: android.app.Notification$Style getStyle()>
<android.app.Notification$CallStyle: java.util.ArrayList getActionsListWithSystemActions()>
<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getText()>
<android.app.Notification$MessagingStyle: java.util.List getMessages()>
<android.app.Notification$TvExtender: java.lang.String getChannelId()>
<android.app.Notification$TvExtender: void <init>(android.app.Notification)>
<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()>
<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>
<android.app.Notification: boolean areActionsVisiblyDifferent(android.app.Notification,android.app.Notification)>
<android.app.Notification: boolean areIconsDifferent(android.app.Notification,android.app.Notification)>
<android.app.Notification: boolean areRemoteViewsChanged(android.app.Notification$Builder,android.app.Notification$Builder)>
<android.app.Notification: boolean areStyledNotificationsVisiblyDifferent(android.app.Notification$Builder,android.app.Notification$Builder)>
<android.app.Notification: boolean hasCompletedProgress()>
<android.app.Notification: boolean isBubbleNotification()>
<android.app.Notification: boolean isFgsOrUij()>
<android.app.Notification: boolean isForegroundService()>
<android.app.Notification: boolean isGroupChild()>
<android.app.Notification: boolean isGroupSummary()>
<android.app.Notification: boolean isMediaNotification()>
<android.app.Notification: boolean isStyle(java.lang.Class)>
<android.app.Notification: boolean isUserInitiatedJob()>
<android.app.Notification: boolean suppressAlertingDueToGrouping()>
<android.app.Notification: java.lang.String getChannelId()>
<android.app.Notification: java.lang.String getGroup()>
<android.app.Notification: java.lang.String getShortcutId()>
<android.app.Notification: java.lang.String getSortKey()>
<android.app.Notification: java.lang.String toString()>
<android.app.Notification: long getTimeoutAfter()>
<android.app.Notification: void addFieldsFromContext(android.content.pm.ApplicationInfo,android.app.Notification)>
<android.app.Notification: void visitUris(java.util.function.Consumer)>
<android.app.NotificationChannel: android.media.AudioAttributes getAudioAttributes()>
<android.app.NotificationChannel: android.net.Uri getSound()>
<android.app.NotificationChannel: boolean canBypassDnd()>
<android.app.NotificationChannel: boolean canShowBadge()>
<android.app.NotificationChannel: boolean equals(java.lang.Object)>
<android.app.NotificationChannel: boolean hasUserSetImportance()>
<android.app.NotificationChannel: boolean isBlockable()>
<android.app.NotificationChannel: boolean isConversation()>
<android.app.NotificationChannel: boolean isDeleted()>
<android.app.NotificationChannel: boolean isDemoted()>
<android.app.NotificationChannel: boolean isImportanceLockedByCriticalDeviceFunction()>
<android.app.NotificationChannel: boolean isImportantConversation()>
<android.app.NotificationChannel: boolean isUserVisibleTaskShown()>
<android.app.NotificationChannel: boolean shouldShowLights()>
<android.app.NotificationChannel: boolean shouldVibrate()>
<android.app.NotificationChannel: int getAllowBubbles()>
<android.app.NotificationChannel: int getImportance()>
<android.app.NotificationChannel: int getLightColor()>
<android.app.NotificationChannel: int getLockscreenVisibility()>
<android.app.NotificationChannel: int getUserLockedFields()>
<android.app.NotificationChannel: java.lang.CharSequence getName()>
<android.app.NotificationChannel: java.lang.String getConversationId()>
<android.app.NotificationChannel: java.lang.String getGroup()>
<android.app.NotificationChannel: java.lang.String getId()>
<android.app.NotificationChannel: java.lang.String getParentChannelId()>
<android.app.NotificationChannel: long[] getVibrationPattern()>
<android.app.NotificationChannel: void <init>(java.lang.String,java.lang.CharSequence,int)>
<android.app.NotificationChannel: void lockFields(int)>
<android.app.NotificationChannel: void setBypassDnd(boolean)>
<android.app.NotificationChannel: void setImportance(int)>
<android.app.NotificationChannel: void setLockscreenVisibility(int)>
<android.app.NotificationChannel: void setName(java.lang.CharSequence)>
<android.app.NotificationChannel: void setUserVisibleTaskShown(boolean)>
<android.app.NotificationChannel: void unlockFields(int)>
<android.app.NotificationChannelGroup: boolean isBlocked()>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification build()>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setChannelId(java.lang.String)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setChannelName(java.lang.String)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setIcon(android.graphics.drawable.Icon)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setPackage(java.lang.String)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setPostedTimeMs(long)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setText(java.lang.String)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setTitle(java.lang.String)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setUid(int)>
<android.app.NotificationHistory$HistoricalNotification$Builder: android.app.NotificationHistory$HistoricalNotification$Builder setUserId(int)>
<android.app.NotificationHistory$HistoricalNotification$Builder: void <init>()>
<android.app.NotificationManager$Policy: android.app.NotificationManager$Policy copy()>
<android.app.NotificationManager$Policy: int hashCode()>
<android.app.NotificationManager$Policy: java.lang.String toString()>
<android.app.NotificationManager$Policy: void <init>(int,int,int,int,int,int)>
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>
<android.app.PendingIntent: android.content.IIntentSender getTarget()>
<android.app.PendingIntent: void send()>
<android.app.admin.DevicePolicyManagerInternal: boolean isActiveDeviceOwner(int)>
<android.app.admin.DevicePolicyManagerInternal: boolean isActiveProfileOwner(int)>
<android.app.usage.UsageStatsManagerInternal: void reportEvent(java.lang.String,int,int)>
<android.app.usage.UsageStatsManagerInternal: void reportInterruptiveNotification(java.lang.String,java.lang.String,int)>
<android.app.usage.UsageStatsManagerInternal: void reportNotificationPosted(java.lang.String,android.os.UserHandle,long)>
<android.app.usage.UsageStatsManagerInternal: void reportNotificationRemoved(java.lang.String,android.os.UserHandle,long)>
<android.app.usage.UsageStatsManagerInternal: void reportNotificationUpdated(java.lang.String,android.os.UserHandle,long)>
<android.content.AttributionSource$Builder: android.content.AttributionSource build()>
<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>
<android.content.AttributionSource$Builder: void <init>(int)>
<android.content.AttributionSource: int getPid()>
<android.content.AttributionSource: int getUid()>
<android.content.ComponentName: boolean equals(java.lang.Object)>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>
<android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>
<android.content.ContentResolver: int getUserId()>
<android.content.Context: android.content.ContentResolver getContentResolver()>
<android.content.Context: android.content.pm.PackageManager getPackageManager()>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: int checkCallingPermission(java.lang.String)>
<android.content.Context: int checkPermission(java.lang.String,int,int)>
<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>
<android.content.Context: java.lang.String getString(int)>
<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.pm.ApplicationInfo: boolean isInstantApp()>
<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,long,int)>
<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,long,int)>
<android.content.pm.IPackageManager: boolean hasSystemFeature(java.lang.String,int)>
<android.content.pm.IPackageManager: boolean isPackageSuspendedForUser(java.lang.String,int)>
<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setPackage(java.lang.String)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setQueryFlags(int)>
<android.content.pm.LauncherApps$ShortcutQuery: android.content.pm.LauncherApps$ShortcutQuery setShortcutIds(java.util.List)>
<android.content.pm.LauncherApps$ShortcutQuery: void <init>()>
<android.content.pm.LauncherApps: java.util.List getShortcuts(android.content.pm.LauncherApps$ShortcutQuery,android.os.UserHandle)>
<android.content.pm.LauncherApps: void registerCallback(android.content.pm.LauncherApps$Callback,android.os.Handler)>
<android.content.pm.LauncherApps: void unregisterCallback(android.content.pm.LauncherApps$Callback)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>
<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>
<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>
<android.content.pm.PackageManagerInternal: boolean isSameApp(java.lang.String,int,int)>
<android.content.pm.PackageManagerInternal: int getDistractingPackageRestrictions(java.lang.String,int)>
<android.content.pm.PackageManagerInternal: int getPackageTargetSdkVersion(java.lang.String)>
<android.content.pm.PackageManagerInternal: void grantImplicitAccess(int,android.content.Intent,int,int,boolean,boolean)>
<android.content.pm.ShortcutInfo: android.app.Person[] getPersons()>
<android.content.pm.ShortcutInfo: boolean isCached()>
<android.content.pm.ShortcutInfo: boolean isEnabled()>
<android.content.pm.ShortcutInfo: boolean isLongLived()>
<android.content.pm.ShortcutInfo: int getUserId()>
<android.content.pm.ShortcutInfo: java.lang.String getId()>
<android.content.pm.ShortcutInfo: java.lang.String getPackage()>
<android.content.pm.ShortcutServiceInternal: void cacheShortcuts(int,java.lang.String,java.lang.String,java.util.List,int,int)>
<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<android.content.res.Resources: int getColor(int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.content.res.Resources: java.lang.String getString(int)>
<android.content.res.TypedArray: float getFloat(int,float)>
<android.content.res.TypedArray: int length()>
<android.content.res.TypedArray: void recycle()>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>
<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>
<android.media.AudioAttributes$Builder: void <init>()>
<android.media.AudioAttributes: int toLegacyStreamType(android.media.AudioAttributes)>
<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()>
<android.media.AudioManager: boolean isAudioFocusExclusive()>
<android.media.AudioManager: int getFocusRampTimeMs(int,android.media.AudioAttributes)>
<android.media.AudioManager: int getMode()>
<android.media.AudioManager: int getRingerModeInternal()>
<android.media.AudioManager: int getStreamVolume(int)>
<android.media.AudioSystem: int getNumStreamTypes()>
<android.media.IRingtonePlayer: void play(android.os.IBinder,android.net.Uri,android.media.AudioAttributes,float,boolean)>
<android.media.IRingtonePlayer: void playAsync(android.net.Uri,android.os.UserHandle,boolean,android.media.AudioAttributes)>
<android.media.IRingtonePlayer: void stop(android.os.IBinder)>
<android.media.IRingtonePlayer: void stopAsync()>
<android.metrics.LogMaker: android.metrics.LogMaker addTaggedData(int,java.lang.Object)>
<android.metrics.LogMaker: android.metrics.LogMaker setCategory(int)>
<android.metrics.LogMaker: android.metrics.LogMaker setPackageName(java.lang.String)>
<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>
<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>
<android.metrics.LogMaker: void <init>(int)>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<android.net.Uri$Builder: void <init>()>
<android.net.Uri: boolean equals(java.lang.Object)>
<android.net.Uri: java.lang.String getScheme()>
<android.os.Binder: android.os.UserHandle getCallingUserHandle()>
<android.os.Binder: int getCallingPid()>
<android.os.Binder: int getCallingUid()>
<android.os.Binder: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>
<android.os.Binder: long clearCallingIdentity()>
<android.os.Binder: void <init>()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>
<android.os.Bundle: boolean containsKey(java.lang.String)>
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>
<android.os.Bundle: java.lang.Object get(java.lang.String)>
<android.os.Bundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>
<android.os.Bundle: java.util.Set keySet()>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean,boolean)>
<android.os.Handler: void handleMessage(android.os.Message)>
<android.os.HandlerExecutor: void <init>(android.os.Handler)>
<android.os.HandlerThread: android.os.Looper getLooper()>
<android.os.HandlerThread: void <init>(java.lang.String,int)>
<android.os.Looper: void setTraceTag(long)>
<android.os.SystemClock: long elapsedRealtime()>
<android.os.Trace: void traceBegin(long,java.lang.String)>
<android.os.Trace: void traceEnd(long)>
<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>
<android.os.UserHandle: android.os.UserHandle of(int)>
<android.os.UserHandle: int getAppId(int)>
<android.os.UserHandle: int getIdentifier()>
<android.os.UserHandle: int getUserId(int)>
<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)>
<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>
<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>
<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>
<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition repeatEffectIndefinitely(android.os.VibrationEffect)>
<android.os.VibrationEffect$VibrationParameter: android.os.VibrationEffect$VibrationParameter targetAmplitude(float)>
<android.os.VibrationEffect$VibrationParameter: android.os.VibrationEffect$VibrationParameter targetFrequency(float)>
<android.os.VibrationEffect$WaveformBuilder: android.os.VibrationEffect build()>
<android.os.VibrationEffect$WaveformBuilder: android.os.VibrationEffect$WaveformBuilder addTransition(java.time.Duration,android.os.VibrationEffect$VibrationParameter,android.os.VibrationEffect$VibrationParameter)>
<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>
<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>
<android.os.VibrationEffect: android.os.VibrationEffect$WaveformBuilder startWaveform()>
<android.os.Vibrator: boolean hasFrequencyControl()>
<android.os.Vibrator: void vibrate(int,java.lang.String,android.os.VibrationEffect,java.lang.String,android.os.VibrationAttributes)>
<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<android.permission.PermissionManager: int checkPermissionForDataDelivery(java.lang.String,android.content.AttributionSource,java.lang.String)>
<android.permission.PermissionManager: int checkPermissionForPreflight(java.lang.String,android.content.AttributionSource)>
<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>
<android.service.notification.IConditionProvider: void onUnsubscribe(android.net.Uri)>
<android.service.notification.INotificationListener: void onNotificationEnqueuedWithChannel(android.service.notification.IStatusBarNotificationHolder,android.app.NotificationChannel,android.service.notification.NotificationRankingUpdate)>
<android.service.notification.IStatusBarNotificationHolder$Stub: void <init>()>
<android.service.notification.NotificationListenerFilter: boolean isPackageAllowed(android.content.pm.VersionedPackage)>
<android.service.notification.NotificationListenerFilter: boolean isTypeAllowed(int)>
<android.service.notification.NotificationListenerService$Ranking: void <init>()>
<android.service.notification.NotificationListenerService$Ranking: void populate(java.lang.String,int,boolean,int,int,int,java.lang.CharSequence,java.lang.String,android.app.NotificationChannel,java.util.ArrayList,java.util.ArrayList,boolean,int,boolean,long,boolean,java.util.ArrayList,java.util.ArrayList,boolean,boolean,boolean,android.content.pm.ShortcutInfo,int,boolean,int,boolean)>
<android.service.notification.NotificationRankingUpdate: void <init>(android.service.notification.NotificationListenerService$Ranking[])>
<android.service.notification.NotificationStats: int getDismissalSurface()>
<android.service.notification.NotificationStats: void <init>()>
<android.service.notification.NotificationStats: void setDismissalSurface(int)>
<android.service.notification.NotificationStats: void setSnoozed()>
<android.service.notification.StatusBarNotification: android.app.Notification getNotification()>
<android.service.notification.StatusBarNotification: android.content.Context getPackageContext(android.content.Context)>
<android.service.notification.StatusBarNotification: android.metrics.LogMaker getLogMaker()>
<android.service.notification.StatusBarNotification: android.os.UserHandle getUser()>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification clone()>
<android.service.notification.StatusBarNotification: android.service.notification.StatusBarNotification cloneLight()>
<android.service.notification.StatusBarNotification: boolean isAppGroup()>
<android.service.notification.StatusBarNotification: boolean isGroup()>
<android.service.notification.StatusBarNotification: boolean isOngoing()>
<android.service.notification.StatusBarNotification: com.android.internal.logging.InstanceId getInstanceId()>
<android.service.notification.StatusBarNotification: int getId()>
<android.service.notification.StatusBarNotification: int getInitialPid()>
<android.service.notification.StatusBarNotification: int getNormalizedUserId()>
<android.service.notification.StatusBarNotification: int getUid()>
<android.service.notification.StatusBarNotification: int getUserId()>
<android.service.notification.StatusBarNotification: java.lang.String getChannelIdLogTag()>
<android.service.notification.StatusBarNotification: java.lang.String getGroup()>
<android.service.notification.StatusBarNotification: java.lang.String getGroupKey()>
<android.service.notification.StatusBarNotification: java.lang.String getGroupLogTag()>
<android.service.notification.StatusBarNotification: java.lang.String getKey()>
<android.service.notification.StatusBarNotification: java.lang.String getOpPkg()>
<android.service.notification.StatusBarNotification: java.lang.String getOverrideGroupKey()>
<android.service.notification.StatusBarNotification: java.lang.String getPackageName()>
<android.service.notification.StatusBarNotification: java.lang.String getShortcutId()>
<android.service.notification.StatusBarNotification: java.lang.String getTag()>
<android.service.notification.StatusBarNotification: long getPostTime()>
<android.service.notification.StatusBarNotification: void <init>(java.lang.String,java.lang.String,int,java.lang.String,int,int,android.app.Notification,android.os.UserHandle,java.lang.String,long)>
<android.service.notification.StatusBarNotification: void setInstanceId(com.android.internal.logging.InstanceId)>
<android.service.notification.StatusBarNotification: void setOverrideGroupKey(java.lang.String)>
<android.service.notification.ZenModeConfig$ZenRule: boolean isAutomaticActive()>
<android.service.notification.ZenModeConfig$ZenRule: boolean isTrueOrUnknown()>
<android.service.notification.ZenModeConfig: android.app.NotificationManager$Policy toNotificationPolicy()>
<android.service.notification.ZenModeConfig: android.app.NotificationManager$Policy toNotificationPolicy(android.service.notification.ZenPolicy)>
<android.service.notification.ZenModeConfig: android.service.notification.ZenModeConfig copy()>
<android.service.notification.ZenModeConfig: boolean equals(java.lang.Object)>
<android.service.notification.ZenModeConfig: boolean isValid()>
<android.service.notification.ZenModeConfig: int hashCode()>
<android.service.notification.ZenModeConfig: java.lang.String toString()>
<android.service.notification.ZenModeConfig: void applyNotificationPolicy(android.app.NotificationManager$Policy)>
<android.service.notification.ZenModeDiff$ConfigDiff: boolean hasDiff()>
<android.service.notification.ZenModeDiff$ConfigDiff: void <init>(android.service.notification.ZenModeConfig,android.service.notification.ZenModeConfig)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy build()>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowAlarms(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder allowMedia(boolean)>
<android.service.notification.ZenPolicy$Builder: android.service.notification.ZenPolicy$Builder disallowAllSounds()>
<android.service.notification.ZenPolicy$Builder: void <init>()>
<android.service.notification.ZenPolicy: void <init>()>
<android.service.notification.ZenPolicy: void apply(android.service.notification.ZenPolicy)>
<android.telecom.TelecomManager: boolean isInManagedCall()>
<android.telecom.TelecomManager: boolean isInSelfManagedCall(java.lang.String,android.os.UserHandle)>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.text.TextUtils: java.lang.String formatSimple(java.lang.String,java.lang.Object[])>
<android.util.ArrayMap: boolean containsKey(java.lang.Object)>
<android.util.ArrayMap: int size()>
<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>
<android.util.ArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
<android.util.ArrayMap: java.lang.Object keyAt(int)>
<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>
<android.util.ArrayMap: java.lang.Object removeAt(int)>
<android.util.ArrayMap: java.lang.Object valueAt(int)>
<android.util.ArrayMap: java.util.Collection values()>
<android.util.ArrayMap: java.util.Set keySet()>
<android.util.ArrayMap: void <init>()>
<android.util.ArrayMap: void clear()>
<android.util.ArraySet: boolean add(java.lang.Object)>
<android.util.ArraySet: boolean contains(java.lang.Object)>
<android.util.ArraySet: int size()>
<android.util.ArraySet: java.lang.Object removeAt(int)>
<android.util.ArraySet: java.lang.Object valueAt(int)>
<android.util.ArraySet: void <init>()>
<android.util.EventLog: int writeEvent(int,java.lang.Object[])>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int wtfStack(java.lang.String,java.lang.String)>
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
<android.util.Slog: int d(java.lang.String,java.lang.String)>
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int e(java.lang.String,java.lang.String)>
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int i(java.lang.String,java.lang.String)>
<android.util.Slog: int v(java.lang.String,java.lang.String)>
<android.util.Slog: int w(java.lang.String,java.lang.String)>
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>
<android.util.SparseArray: java.lang.Object get(int)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.util.StatsEvent$Builder: android.util.StatsEvent build()>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder addBooleanAnnotation(byte,boolean)>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder setAtomId(int)>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder usePooledBuffer()>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeBoolean(boolean)>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeInt(int)>
<android.util.StatsEvent$Builder: android.util.StatsEvent$Builder writeString(java.lang.String)>
<android.util.StatsEvent: android.util.StatsEvent$Builder newBuilder()>
<android.util.StatsLog: void write(android.util.StatsEvent)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityManager: boolean isEnabled()>
<android.view.accessibility.AccessibilityManager: boolean startFlashNotificationEvent(android.content.Context,int,java.lang.String)>
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<android.widget.RemoteViews: int estimateMemoryUsage()>
<com.android.internal.config.sysui.SystemUiSystemPropertiesFlags$FlagResolver: boolean isEnabled(com.android.internal.config.sysui.SystemUiSystemPropertiesFlags$Flag)>
<com.android.internal.logging.InstanceId: int getId()>
<com.android.internal.logging.InstanceIdSequence: com.android.internal.logging.InstanceId newInstanceId()>
<com.android.internal.logging.MetricsLogger: void action(android.metrics.LogMaker)>
<com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>
<com.android.internal.util.FrameworkStatsLog: void write(int,int,int,java.lang.String,int,int,int,boolean,int,boolean,boolean)>
<com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<com.android.server.DeviceIdleInternal: long getNotificationAllowlistDuration()>
<com.android.server.EventLogTags: void writeNotificationAlert(java.lang.String,int,int,int)>
<com.android.server.EventLogTags: void writeNotificationCancel(int,int,java.lang.String,int,java.lang.String,int,int,int,int,java.lang.String)>
<com.android.server.EventLogTags: void writeNotificationCanceled(java.lang.String,int,int,int,int,int,int,java.lang.String)>
<com.android.server.EventLogTags: void writeNotificationEnqueue(int,int,java.lang.String,int,java.lang.String,int,java.lang.String,int)>
<com.android.server.IoThread: android.os.Handler getHandler()>
<com.android.server.IoThread: void <init>()>
<com.android.server.IoThread: void ensureThreadLocked()>
<com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>
<com.android.server.ServiceThread: android.os.Handler makeSharedHandler(android.os.Looper)>
<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>
<com.android.server.SystemService: android.content.Context getContext()>
<com.android.server.job.JobSchedulerInternal: boolean isNotificationAssociatedWithAnyUserInitiatedJobs(int,int,java.lang.String)>
<com.android.server.lights.LogicalLight: void pulse()>
<com.android.server.lights.LogicalLight: void setFlashing(int,int,int,int)>
<com.android.server.lights.LogicalLight: void turnOff()>
<com.android.server.notification.AlertRateLimiter: boolean shouldRateLimitAlert(long)>
<com.android.server.notification.AlertRateLimiter: void <init>()>
<com.android.server.notification.ConditionProviders: android.service.notification.Condition findCondition(android.content.ComponentName,android.net.Uri)>
<com.android.server.notification.ConditionProviders: android.service.notification.IConditionProvider findConditionProvider(android.content.ComponentName)>
<com.android.server.notification.ConditionProviders: boolean subscribeIfNecessary(android.content.ComponentName,android.net.Uri)>
<com.android.server.notification.ConditionProviders: com.android.server.notification.ConditionProviders$ConditionRecord getRecordLocked(android.net.Uri,android.content.ComponentName,boolean)>
<com.android.server.notification.ConditionProviders: java.lang.Iterable getSystemProviders()>
<com.android.server.notification.ConditionProviders: void ensureRecordExists(android.content.ComponentName,android.net.Uri,android.service.notification.IConditionProvider)>
<com.android.server.notification.ConditionProviders: void unsubscribeIfNecessary(android.content.ComponentName,android.net.Uri)>
<com.android.server.notification.ConditionProviders: void unsubscribeLocked(com.android.server.notification.ConditionProviders$ConditionRecord)>
<com.android.server.notification.GroupHelper$Callback: void addAutoGroup(java.lang.String)>
<com.android.server.notification.GroupHelper$Callback: void addAutoGroupSummary(int,java.lang.String,java.lang.String,int)>
<com.android.server.notification.GroupHelper$Callback: void removeAutoGroup(java.lang.String)>
<com.android.server.notification.GroupHelper$Callback: void removeAutoGroupSummary(int,java.lang.String)>
<com.android.server.notification.GroupHelper$Callback: void updateAutogroupSummary(int,java.lang.String,int)>
<com.android.server.notification.GroupHelper: void maybeGroup(android.service.notification.StatusBarNotification,boolean)>
<com.android.server.notification.GroupHelper: void maybeUngroup(android.service.notification.StatusBarNotification,boolean,int)>
<com.android.server.notification.GroupHelper: void onNotificationPosted(android.service.notification.StatusBarNotification,boolean)>
<com.android.server.notification.GroupHelper: void onNotificationRemoved(android.service.notification.StatusBarNotification)>
<com.android.server.notification.ManagedServices$ManagedServiceInfo: boolean isSameUser(int)>
<com.android.server.notification.ManagedServices$UserProfiles: boolean isCurrentProfile(int)>
<com.android.server.notification.ManagedServices: java.util.List getServices()>
<com.android.server.notification.NotificationChannelLogger$NotificationChannelEvent: com.android.server.notification.NotificationChannelLogger$NotificationChannelEvent getUpdated(boolean)>
<com.android.server.notification.NotificationChannelLogger$NotificationChannelEvent: int getId()>
<com.android.server.notification.NotificationChannelLogger: int getConversationIdHash(android.app.NotificationChannel)>
<com.android.server.notification.NotificationChannelLogger: int getIdHash(android.app.NotificationChannel)>
<com.android.server.notification.NotificationChannelLogger: int getLoggingImportance(android.app.NotificationChannel)>
<com.android.server.notification.NotificationChannelLogger: int getLoggingImportance(android.app.NotificationChannel,int)>
<com.android.server.notification.NotificationChannelLogger: void logNotificationChannel(com.android.server.notification.NotificationChannelLogger$NotificationChannelEvent,android.app.NotificationChannel,int,java.lang.String,int,int)>
<com.android.server.notification.NotificationChannelLogger: void logNotificationChannelModified(android.app.NotificationChannel,int,java.lang.String,int,boolean)>
<com.android.server.notification.NotificationChannelLoggerImpl: void logNotificationChannel(com.android.server.notification.NotificationChannelLogger$NotificationChannelEvent,android.app.NotificationChannel,int,java.lang.String,int,int)>
<com.android.server.notification.NotificationHistoryManager$$ExternalSyntheticLambda0: void <init>(com.android.server.notification.NotificationHistoryManager,android.app.NotificationHistory$HistoricalNotification)>
<com.android.server.notification.NotificationHistoryManager: void addNotification(android.app.NotificationHistory$HistoricalNotification)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda11: boolean apply(int)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda11: void <init>()>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda12: void <init>(com.android.server.notification.NotificationManagerService,java.util.List,com.android.server.notification.NotificationManagerService$PostNotificationTracker,com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda12: void run()>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda2: void <init>(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,android.os.VibrationEffect)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda2: void run()>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda4: void <init>(com.android.server.notification.NotificationManagerService,java.lang.CharSequence)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda5: void <init>(com.android.server.notification.NotificationManagerService,boolean,android.app.Notification,int,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda5: void run()>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda6: void <init>()>
<com.android.server.notification.NotificationManagerService$$ExternalSyntheticLambda7: void <init>(com.android.server.notification.NotificationManagerService,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService$14: void <init>(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService$14: void run()>
<com.android.server.notification.NotificationManagerService$15: void <init>(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$15: void run()>
<com.android.server.notification.NotificationManagerService$Archive: void record(android.service.notification.StatusBarNotification,int)>
<com.android.server.notification.NotificationManagerService$EnqueueNotificationRunnable: boolean enqueueNotification()>
<com.android.server.notification.NotificationManagerService$EnqueueNotificationRunnable: void <init>(com.android.server.notification.NotificationManagerService,int,com.android.server.notification.NotificationRecord,boolean,com.android.server.notification.NotificationManagerService$PostNotificationTracker)>
<com.android.server.notification.NotificationManagerService$EnqueueNotificationRunnable: void run()>
<com.android.server.notification.NotificationManagerService$NotificationAssistants$$ExternalSyntheticLambda10: void <init>(java.util.function.BiConsumer,android.service.notification.INotificationListener,com.android.server.notification.NotificationManagerService$StatusBarNotificationHolder)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants$$ExternalSyntheticLambda10: void run()>
<com.android.server.notification.NotificationManagerService$NotificationAssistants$$ExternalSyntheticLambda4: void <init>(com.android.server.notification.NotificationManagerService$NotificationAssistants,java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: boolean isEnabled()>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: boolean isVerboseLogEnabled()>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void '-$$Nest$mnotifyAssistantSnoozedLocked'(com.android.server.notification.NotificationManagerService$NotificationAssistants,com.android.server.notification.NotificationRecord,java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void '-$$Nest$monNotificationEnqueuedLocked'(com.android.server.notification.NotificationManagerService$NotificationAssistants,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void notifyAssistantLocked(android.service.notification.StatusBarNotification,int,boolean,java.util.function.BiConsumer)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void notifyAssistantSnoozedLocked(com.android.server.notification.NotificationRecord,java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationAssistants: void onNotificationEnqueuedLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$NotificationListeners$$ExternalSyntheticLambda1: void <init>(com.android.server.notification.NotificationManagerService$NotificationListeners,com.android.server.notification.ManagedServices$ManagedServiceInfo,android.service.notification.StatusBarNotification,android.service.notification.NotificationRankingUpdate)>
<com.android.server.notification.NotificationManagerService$NotificationListeners$$ExternalSyntheticLambda1: void run()>
<com.android.server.notification.NotificationManagerService$NotificationListeners$$ExternalSyntheticLambda2: void <init>(com.android.server.notification.NotificationManagerService$NotificationListeners,com.android.server.notification.ManagedServices$ManagedServiceInfo,android.service.notification.StatusBarNotification,android.service.notification.NotificationRankingUpdate)>
<com.android.server.notification.NotificationManagerService$NotificationListeners$$ExternalSyntheticLambda2: void run()>
<com.android.server.notification.NotificationManagerService$NotificationListeners: boolean isListenerPackage(java.lang.String)>
<com.android.server.notification.NotificationManagerService$NotificationListeners: java.util.List prepareNotifyPostedLocked(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.NotificationManagerService$NotificationListeners: void $r8$lambda$HPRBegfI1wvK77_GMLNivXZgHi0(com.android.server.notification.NotificationManagerService$NotificationListeners,com.android.server.notification.ManagedServices$ManagedServiceInfo,android.service.notification.StatusBarNotification,android.service.notification.NotificationRankingUpdate)>
<com.android.server.notification.NotificationManagerService$NotificationListeners: void $r8$lambda$gopMPHUla24Uhbx5EV_eVLtMAsk(com.android.server.notification.NotificationManagerService$NotificationListeners,com.android.server.notification.ManagedServices$ManagedServiceInfo,android.service.notification.StatusBarNotification,android.service.notification.NotificationRankingUpdate)>
<com.android.server.notification.NotificationManagerService$NotificationListeners: void notifyRemovedLocked(com.android.server.notification.NotificationRecord,int,android.service.notification.NotificationStats)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable$$ExternalSyntheticLambda0: void <init>(com.android.server.notification.NotificationManagerService$PostNotificationRunnable,android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable$$ExternalSyntheticLambda0: void run()>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable$1: void <init>(com.android.server.notification.NotificationManagerService$PostNotificationRunnable,android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable$1: void run()>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: boolean postNotification()>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: void $r8$lambda$gSsjvQOvpvpGepxAF-UwxHiqW2g(com.android.server.notification.NotificationManagerService$PostNotificationRunnable,android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: void <init>(com.android.server.notification.NotificationManagerService,java.lang.String,java.lang.String,int,com.android.server.notification.NotificationManagerService$PostNotificationTracker)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: void lambda$postNotification$0(android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService$PostNotificationRunnable: void run()>
<com.android.server.notification.NotificationManagerService$PostNotificationTracker$$ExternalSyntheticLambda0: void <init>(com.android.server.notification.NotificationManagerService$PostNotificationTracker)>
<com.android.server.notification.NotificationManagerService$PostNotificationTracker: boolean isOngoing()>
<com.android.server.notification.NotificationManagerService$PostNotificationTracker: long getStartTime()>
<com.android.server.notification.NotificationManagerService$PostNotificationTracker: void <init>(android.os.PowerManager$WakeLock)>
<com.android.server.notification.NotificationManagerService$PostNotificationTracker: void cancel()>
<com.android.server.notification.NotificationManagerService$PostNotificationTrackerFactory: com.android.server.notification.NotificationManagerService$PostNotificationTracker newTracker(android.os.PowerManager$WakeLock)>
<com.android.server.notification.NotificationManagerService$SnoozeNotificationRunnable: boolean isSnoozable(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$SnoozeNotificationRunnable: void <init>(com.android.server.notification.NotificationManagerService,java.lang.String,long,java.lang.String)>
<com.android.server.notification.NotificationManagerService$SnoozeNotificationRunnable: void run()>
<com.android.server.notification.NotificationManagerService$SnoozeNotificationRunnable: void snoozeLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$SnoozeNotificationRunnable: void snoozeNotificationLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService$StatusBarNotificationHolder: void <init>(android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService$StrongAuthTracker: boolean isInLockDownMode(int)>
<com.android.server.notification.NotificationManagerService$TrimCache: android.service.notification.StatusBarNotification ForListener(com.android.server.notification.ManagedServices$ManagedServiceInfo)>
<com.android.server.notification.NotificationManagerService$TrimCache: void <init>(com.android.server.notification.NotificationManagerService,android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService: android.app.usage.UsageStatsManagerInternal '-$$Nest$fgetmUsageStatsManagerInternal'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: android.media.AudioAttributes '-$$Nest$fgetmInCallNotificationAudioAttributes'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: android.net.Uri '-$$Nest$fgetmInCallNotificationUri'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: android.os.Binder '-$$Nest$fgetmCallNotificationToken'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: android.service.notification.NotificationRankingUpdate makeRankingUpdateLocked(com.android.server.notification.ManagedServices$ManagedServiceInfo)>
<com.android.server.notification.NotificationManagerService: boolean $r8$lambda$ini7SIhlRToybJ41asYNENAAmo4(int)>
<com.android.server.notification.NotificationManagerService: boolean '-$$Nest$mareNotificationsEnabledForPackageInt'(com.android.server.notification.NotificationManagerService,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean '-$$Nest$mhasAutoGroupSummaryLocked'(com.android.server.notification.NotificationManagerService,android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService: boolean '-$$Nest$misCallNotification'(com.android.server.notification.NotificationManagerService,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean '-$$Nest$misCritical'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean '-$$Nest$mremoveFromNotificationListsLocked'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean areNotificationsEnabledForPackageInt(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean canBeNonDismissible(android.content.pm.ApplicationInfo,android.app.Notification)>
<com.android.server.notification.NotificationManagerService: boolean canShowLightsLocked(com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.NotificationManagerService: boolean checkDisqualifyingFeatures(int,int,int,java.lang.String,com.android.server.notification.NotificationRecord,boolean,boolean)>
<com.android.server.notification.NotificationManagerService: boolean checkUseFullScreenIntentPermission(android.content.AttributionSource,android.content.pm.ApplicationInfo,boolean,boolean)>
<com.android.server.notification.NotificationManagerService: boolean enqueueNotificationInternal(java.lang.String,java.lang.String,int,int,java.lang.String,int,android.app.Notification,int,boolean,com.android.server.notification.NotificationManagerService$PostNotificationTracker,boolean)>
<com.android.server.notification.NotificationManagerService: boolean hasAutoGroupSummaryLocked(android.service.notification.StatusBarNotification)>
<com.android.server.notification.NotificationManagerService: boolean hasFlag(int,int)>
<com.android.server.notification.NotificationManagerService: boolean isCallNotification(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean isCallNotification(java.lang.String,int,android.app.Notification)>
<com.android.server.notification.NotificationManagerService: boolean isCallerAndroid(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean isCallerInstantApp(int,int)>
<com.android.server.notification.NotificationManagerService: boolean isCallerIsSystemOrSystemUi()>
<com.android.server.notification.NotificationManagerService: boolean isCallerSameApp(java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: boolean isCallerSystemOrPhone()>
<com.android.server.notification.NotificationManagerService: boolean isCritical(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean isCurrentlyInsistent()>
<com.android.server.notification.NotificationManagerService: boolean isDefaultSearchSelectorPackage(java.lang.String)>
<com.android.server.notification.NotificationManagerService: boolean isEnterpriseExempted(android.content.pm.ApplicationInfo)>
<com.android.server.notification.NotificationManagerService: boolean isInCall()>
<com.android.server.notification.NotificationManagerService: boolean isInLockDownMode(int)>
<com.android.server.notification.NotificationManagerService: boolean isInsistentUpdate(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean isLoopingRingtoneNotification(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean isNotificationForCurrentUser(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean isNotificationShownInternal(java.lang.String,java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: boolean isPackagePausedOrSuspended(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: boolean isRecordBlockedLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean isUidSystemOrPhone(int)>
<com.android.server.notification.NotificationManagerService: boolean isVisibleToListener(android.service.notification.StatusBarNotification,int,com.android.server.notification.ManagedServices$ManagedServiceInfo)>
<com.android.server.notification.NotificationManagerService: boolean isVisuallyInterruptive(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean lambda$handleGroupedNotificationLocked$9(int)>
<com.android.server.notification.NotificationManagerService: boolean notificationMatchesUserId(com.android.server.notification.NotificationRecord,int)>
<com.android.server.notification.NotificationManagerService: boolean playSound(com.android.server.notification.NotificationRecord,android.net.Uri)>
<com.android.server.notification.NotificationManagerService: boolean playVibration(com.android.server.notification.NotificationRecord,android.os.VibrationEffect,boolean)>
<com.android.server.notification.NotificationManagerService: boolean removeFromNotificationListsLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: boolean removeRemoteView(java.lang.String,java.lang.String,int,android.widget.RemoteViews)>
<com.android.server.notification.NotificationManagerService: boolean shouldMuteNotificationLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: com.android.internal.logging.InstanceId getGroupInstanceId(java.lang.String)>
<com.android.server.notification.NotificationManagerService: com.android.internal.logging.InstanceIdSequence '-$$Nest$fgetmNotificationInstanceIdSequence'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.GroupHelper '-$$Nest$fgetmGroupHelper'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationManagerService$NotificationAssistants '-$$Nest$fgetmAssistants'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationManagerService$NotificationListeners '-$$Nest$fgetmListeners'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationManagerService$PostNotificationTracker acquireWakeLockForPost(java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationManagerService$WorkerHandler '-$$Nest$fgetmHandler'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord '-$$Nest$mfindInCurrentAndSnoozedNotificationByKeyLocked'(com.android.server.notification.NotificationManagerService,java.lang.String)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord findInCurrentAndSnoozedNotificationByKeyLocked(java.lang.String)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord findNotificationByKeyLocked(java.lang.String)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord findNotificationByListLocked(java.util.ArrayList,java.lang.String)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord findNotificationByListLocked(java.util.ArrayList,java.lang.String,java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecord findNotificationLocked(java.lang.String,java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationRecordLogger '-$$Nest$fgetmNotificationRecordLogger'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.NotificationUsageStats '-$$Nest$fgetmUsageStats'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: com.android.server.notification.ShortcutHelper '-$$Nest$fgetmShortcutHelper'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: float '-$$Nest$fgetmInCallNotificationVolume'(com.android.server.notification.NotificationManagerService)>
<com.android.server.notification.NotificationManagerService: int buzzBeepBlinkLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: int clamp(int,int,int)>
<com.android.server.notification.NotificationManagerService: int getNotificationCount(java.lang.String,int,int,java.lang.String)>
<com.android.server.notification.NotificationManagerService: int getRealUserId(int)>
<com.android.server.notification.NotificationManagerService: int indexOfNotificationLocked(java.lang.String)>
<com.android.server.notification.NotificationManagerService: int resolveNotificationUid(java.lang.String,java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: java.lang.String disableNotificationEffects(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: java.lang.String getHistoryText(android.content.Context,android.app.Notification)>
<com.android.server.notification.NotificationManagerService: java.lang.String getHistoryTitle(android.app.Notification)>
<com.android.server.notification.NotificationManagerService: java.util.List findCurrentAndSnoozedGroupNotificationsLocked(java.lang.String,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: java.util.List findGroupNotificationByListLocked(java.util.ArrayList,java.lang.String,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: java.util.List findGroupNotificationsLocked(java.lang.String,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void $r8$lambda$90QA-C_nxsh90wN1NGv5bmj7NFQ(com.android.server.notification.NotificationManagerService,boolean,android.app.Notification,int,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void $r8$lambda$CyvvueUmBdJ5j3lAW14TQp61Xoc(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,android.os.VibrationEffect)>
<com.android.server.notification.NotificationManagerService: void $r8$lambda$YzbfzRo0nVC-DFq6WwmcDsJO8tg(com.android.server.notification.NotificationManagerService,java.util.List,com.android.server.notification.NotificationManagerService$PostNotificationTracker,com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationManagerService: void '-$$Nest$fputmCallNotificationToken'(com.android.server.notification.NotificationManagerService,android.os.Binder)>
<com.android.server.notification.NotificationManagerService: void '-$$Nest$mcancelNotificationLocked'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,boolean,int,boolean,java.lang.String,long)>
<com.android.server.notification.NotificationManagerService: void '-$$Nest$mhandleGroupedNotificationLocked'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,int,int)>
<com.android.server.notification.NotificationManagerService: void '-$$Nest$mnotifyListenersPostedAndLogLocked'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationManagerService$PostNotificationTracker,com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationManagerService: void '-$$Nest$mupdateNotificationBubbleFlags'(com.android.server.notification.NotificationManagerService,com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.NotificationManagerService: void cancelGroupChildrenByListLocked(java.util.ArrayList,com.android.server.notification.NotificationRecord,int,int,java.lang.String,boolean,boolean,com.android.server.notification.NotificationManagerService$FlagChecker,int,long)>
<com.android.server.notification.NotificationManagerService: void cancelGroupChildrenLocked(com.android.server.notification.NotificationRecord,int,int,java.lang.String,boolean,com.android.server.notification.NotificationManagerService$FlagChecker,int,long)>
<com.android.server.notification.NotificationManagerService: void cancelNotificationLocked(com.android.server.notification.NotificationRecord,boolean,int,boolean,java.lang.String,long)>
<com.android.server.notification.NotificationManagerService: void cancelNotificationLocked(com.android.server.notification.NotificationRecord,boolean,int,int,int,boolean,java.lang.String,long)>
<com.android.server.notification.NotificationManagerService: void checkCallerIsSameApp(java.lang.String,int,int)>
<com.android.server.notification.NotificationManagerService: void checkRemoteViews(java.lang.String,java.lang.String,int,android.app.Notification)>
<com.android.server.notification.NotificationManagerService: void checkRestrictedCategories(android.app.Notification)>
<com.android.server.notification.NotificationManagerService: void clearSoundLocked()>
<com.android.server.notification.NotificationManagerService: void clearVibrateLocked()>
<com.android.server.notification.NotificationManagerService: void doChannelWarningToast(int,java.lang.CharSequence)>
<com.android.server.notification.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,java.lang.String,int,int,java.lang.String,int,android.app.Notification,int,boolean)>
<com.android.server.notification.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,java.lang.String,int,int,java.lang.String,int,android.app.Notification,int,boolean,boolean)>
<com.android.server.notification.NotificationManagerService: void fixNotification(android.app.Notification,java.lang.String,java.lang.String,int,int,int,android.app.ActivityManagerInternal$ServiceNotificationPolicy,boolean)>
<com.android.server.notification.NotificationManagerService: void handleGroupedNotificationLocked(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,int,int)>
<com.android.server.notification.NotificationManagerService: void handleSavePolicyFile()>
<com.android.server.notification.NotificationManagerService: void lambda$notifyListenersPostedAndLogLocked$12(java.util.List,com.android.server.notification.NotificationManagerService$PostNotificationTracker,com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationManagerService: void lambda$playVibration$10(com.android.server.notification.NotificationRecord,android.os.VibrationEffect)>
<com.android.server.notification.NotificationManagerService: void lambda$reportForegroundServiceUpdate$5(boolean,android.app.Notification,int,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void makeStickyHun(android.app.Notification,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void maybeRecordInterruptionLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void maybeRegisterMessageSent(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void maybeReportForegroundServiceUpdate(com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.NotificationManagerService: void notifyListenersPostedAndLogLocked(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationManagerService$PostNotificationTracker,com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationManagerService: void playInCallNotification()>
<com.android.server.notification.NotificationManagerService: void recordCallerLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void reportForegroundServiceUpdate(boolean,android.app.Notification,int,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void reportUserInteraction(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void scheduleTimeoutLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void sendAccessibilityEvent(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationManagerService: void updateLightsLocked()>
<com.android.server.notification.NotificationManagerService: void updateNotificationBubbleFlags(com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.NotificationManagerService: void updateUriPermissions(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,java.lang.String,int)>
<com.android.server.notification.NotificationManagerService: void updateUriPermissions(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,java.lang.String,int,boolean)>
<com.android.server.notification.NotificationManagerService: void vibrate(com.android.server.notification.NotificationRecord,android.os.VibrationEffect,boolean)>
<com.android.server.notification.NotificationRecord$$ExternalSyntheticLambda0: void <init>(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecord$Light: void <init>(int,int,int)>
<com.android.server.notification.NotificationRecord: android.app.Notification getNotification()>
<com.android.server.notification.NotificationRecord: android.app.NotificationChannel getChannel()>
<com.android.server.notification.NotificationRecord: android.content.pm.ShortcutInfo getShortcutInfo()>
<com.android.server.notification.NotificationRecord: android.media.AudioAttributes calculateAttributes()>
<com.android.server.notification.NotificationRecord: android.media.AudioAttributes getAudioAttributes()>
<com.android.server.notification.NotificationRecord: android.metrics.LogMaker getItemLogMaker()>
<com.android.server.notification.NotificationRecord: android.metrics.LogMaker getLogMaker()>
<com.android.server.notification.NotificationRecord: android.metrics.LogMaker getLogMaker(long)>
<com.android.server.notification.NotificationRecord: android.net.Uri calculateSound()>
<com.android.server.notification.NotificationRecord: android.net.Uri getSound()>
<com.android.server.notification.NotificationRecord: android.os.UserHandle getUser()>
<com.android.server.notification.NotificationRecord: android.os.VibrationEffect calculateVibration()>
<com.android.server.notification.NotificationRecord: android.os.VibrationEffect getVibration()>
<com.android.server.notification.NotificationRecord: android.service.notification.NotificationStats getStats()>
<com.android.server.notification.NotificationRecord: android.service.notification.StatusBarNotification getSbn()>
<com.android.server.notification.NotificationRecord: android.util.ArraySet getGrantableUris()>
<com.android.server.notification.NotificationRecord: boolean canBubble()>
<com.android.server.notification.NotificationRecord: boolean canShowBadge()>
<com.android.server.notification.NotificationRecord: boolean hasRecordedInterruption()>
<com.android.server.notification.NotificationRecord: boolean hasSensitiveContent()>
<com.android.server.notification.NotificationRecord: boolean hasUndecoratedRemoteView()>
<com.android.server.notification.NotificationRecord: boolean isConversation()>
<com.android.server.notification.NotificationRecord: boolean isFlagBubbleRemoved()>
<com.android.server.notification.NotificationRecord: boolean isForegroundService()>
<com.android.server.notification.NotificationRecord: boolean isHidden()>
<com.android.server.notification.NotificationRecord: boolean isIntercepted()>
<com.android.server.notification.NotificationRecord: boolean isInterruptive()>
<com.android.server.notification.NotificationRecord: boolean isOnlyBots(android.app.Person[])>
<com.android.server.notification.NotificationRecord: boolean isPreChannelsNotification()>
<com.android.server.notification.NotificationRecord: boolean isRecentlyIntrusive()>
<com.android.server.notification.NotificationRecord: boolean isTextChanged()>
<com.android.server.notification.NotificationRecord: boolean rankingScoreMatches(float)>
<com.android.server.notification.NotificationRecord: boolean shouldPostSilently()>
<com.android.server.notification.NotificationRecord: com.android.server.notification.NotificationRecord$Light calculateLights()>
<com.android.server.notification.NotificationRecord: com.android.server.notification.NotificationRecord$Light getLight()>
<com.android.server.notification.NotificationRecord: float getRankingScore()>
<com.android.server.notification.NotificationRecord: int calculateInitialImportance()>
<com.android.server.notification.NotificationRecord: int getAssistantImportance()>
<com.android.server.notification.NotificationRecord: int getAuthoritativeRank()>
<com.android.server.notification.NotificationRecord: int getCriticality()>
<com.android.server.notification.NotificationRecord: int getExposureMs(long)>
<com.android.server.notification.NotificationRecord: int getFlags()>
<com.android.server.notification.NotificationRecord: int getFreshnessMs(long)>
<com.android.server.notification.NotificationRecord: int getImportance()>
<com.android.server.notification.NotificationRecord: int getImportanceExplanationCode()>
<com.android.server.notification.NotificationRecord: int getInitialImportance()>
<com.android.server.notification.NotificationRecord: int getInitialImportanceExplanationCode()>
<com.android.server.notification.NotificationRecord: int getInterruptionMs(long)>
<com.android.server.notification.NotificationRecord: int getLifespanMs(long)>
<com.android.server.notification.NotificationRecord: int getNotificationType()>
<com.android.server.notification.NotificationRecord: int getPackageVisibilityOverride()>
<com.android.server.notification.NotificationRecord: int getProposedImportance()>
<com.android.server.notification.NotificationRecord: int getSuppressedVisualEffects()>
<com.android.server.notification.NotificationRecord: int getUid()>
<com.android.server.notification.NotificationRecord: int getUserId()>
<com.android.server.notification.NotificationRecord: int getUserSentiment()>
<com.android.server.notification.NotificationRecord: java.lang.CharSequence getImportanceExplanation()>
<com.android.server.notification.NotificationRecord: java.lang.String getAdjustmentIssuer()>
<com.android.server.notification.NotificationRecord: java.lang.String getGroupKey()>
<com.android.server.notification.NotificationRecord: java.lang.String getKey()>
<com.android.server.notification.NotificationRecord: java.util.ArrayList getPeopleOverride()>
<com.android.server.notification.NotificationRecord: java.util.ArrayList getSmartReplies()>
<com.android.server.notification.NotificationRecord: java.util.ArrayList getSnoozeCriteria()>
<com.android.server.notification.NotificationRecord: java.util.ArrayList getSystemGeneratedSmartActions()>
<com.android.server.notification.NotificationRecord: long calculateRankingTimeMs(long)>
<com.android.server.notification.NotificationRecord: long getLastAudiblyAlertedMs()>
<com.android.server.notification.NotificationRecord: long getRankingTimeMs()>
<com.android.server.notification.NotificationRecord: void <clinit>()>
<com.android.server.notification.NotificationRecord: void <init>(android.content.Context,android.service.notification.StatusBarNotification,android.app.NotificationChannel)>
<com.android.server.notification.NotificationRecord: void calculateGrantableUris()>
<com.android.server.notification.NotificationRecord: void calculateImportance()>
<com.android.server.notification.NotificationRecord: void calculateUserSentiment()>
<com.android.server.notification.NotificationRecord: void copyRankingInformation(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecord: void recordDismissalSurface(int)>
<com.android.server.notification.NotificationRecord: void recordSnoozed()>
<com.android.server.notification.NotificationRecord: void setAudiblyAlerted(boolean)>
<com.android.server.notification.NotificationRecord: void setAuthoritativeRank(int)>
<com.android.server.notification.NotificationRecord: void setFlagBubbleRemoved(boolean)>
<com.android.server.notification.NotificationRecord: void setGlobalSortKey(java.lang.String)>
<com.android.server.notification.NotificationRecord: void setHasSentValidMsg(boolean)>
<com.android.server.notification.NotificationRecord: void setHidden(boolean)>
<com.android.server.notification.NotificationRecord: void setImportanceFixed(boolean)>
<com.android.server.notification.NotificationRecord: void setInterruptive(boolean)>
<com.android.server.notification.NotificationRecord: void setIsAppImportanceLocked(boolean)>
<com.android.server.notification.NotificationRecord: void setPkgAllowedAsConvo(boolean)>
<com.android.server.notification.NotificationRecord: void setPostSilently(boolean)>
<com.android.server.notification.NotificationRecord: void setRecordedInterruption(boolean)>
<com.android.server.notification.NotificationRecord: void setShortcutInfo(android.content.pm.ShortcutInfo)>
<com.android.server.notification.NotificationRecord: void setSystemImportance(int)>
<com.android.server.notification.NotificationRecord: void setTextChanged(boolean)>
<com.android.server.notification.NotificationRecord: void updateNotificationChannel(android.app.NotificationChannel)>
<com.android.server.notification.NotificationRecord: void userDemotedAppFromConvoSpace(boolean)>
<com.android.server.notification.NotificationRecord: void visitGrantableUri(android.net.Uri,boolean,boolean)>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: boolean shouldLogReported(int)>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getAssistantHash()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getChannelIdHash()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getGroupIdHash()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getInstanceId()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getNotificationIdHash()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getNumPeople()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getNumPeople(android.os.Bundle)>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getStyle()>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: int getStyle(android.os.Bundle)>
<com.android.server.notification.NotificationRecordLogger$NotificationRecordPair: void <init>(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecordLogger$NotificationReported: void <init>(com.android.server.notification.NotificationRecordLogger$NotificationRecordPair,com.android.server.notification.NotificationRecordLogger$NotificationReportedEvent,int,int,com.android.internal.logging.InstanceId)>
<com.android.server.notification.NotificationRecordLogger$NotificationReportedEvent: com.android.server.notification.NotificationRecordLogger$NotificationReportedEvent fromRecordPair(com.android.server.notification.NotificationRecordLogger$NotificationRecordPair)>
<com.android.server.notification.NotificationRecordLogger$NotificationReportedEvent: int getId()>
<com.android.server.notification.NotificationRecordLogger: boolean isForegroundService(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecordLogger: boolean isNonDismissible(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecordLogger: com.android.server.notification.NotificationRecordLogger$NotificationReported prepareToLogNotificationPosted(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord,int,int,com.android.internal.logging.InstanceId)>
<com.android.server.notification.NotificationRecordLogger: int getLoggingImportance(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecordLogger: void log(com.android.internal.logging.UiEventLogger$UiEventEnum,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationRecordLogger: void logNotificationCancelled(com.android.server.notification.NotificationRecord,int,int)>
<com.android.server.notification.NotificationRecordLogger: void logNotificationPosted(com.android.server.notification.NotificationRecordLogger$NotificationReported)>
<com.android.server.notification.NotificationUsageStats$AggregatedStats: boolean isAlertRateLimited()>
<com.android.server.notification.NotificationUsageStats$AggregatedStats: float getEnqueueRate(long)>
<com.android.server.notification.NotificationUsageStats$AggregatedStats: void <init>(android.content.Context,java.lang.String)>
<com.android.server.notification.NotificationUsageStats$AggregatedStats: void countApiUse(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats$AggregatedStats: void updateInterarrivalEstimate(long)>
<com.android.server.notification.NotificationUsageStats$ImportanceHistogram: void <clinit>()>
<com.android.server.notification.NotificationUsageStats$ImportanceHistogram: void <init>(android.content.Context,java.lang.String)>
<com.android.server.notification.NotificationUsageStats$ImportanceHistogram: void increment(int)>
<com.android.server.notification.NotificationUsageStats$SingleNotificationStats: void <init>()>
<com.android.server.notification.NotificationUsageStats: boolean isAlertRateLimited(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats getOrCreateAggregatedStatsLocked(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats[] getAggregatedStatsLocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: com.android.server.notification.NotificationUsageStats$AggregatedStats[] getAggregatedStatsLocked(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: float getAppEnqueueRate(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: void registerBlocked(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void registerDismissedByUser(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void registerEnqueuedByApp(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: void registerImageRemoved(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: void registerOverCountQuota(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: void registerOverRateQuota(java.lang.String)>
<com.android.server.notification.NotificationUsageStats: void registerPostedByApp(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void registerRemovedByApp(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void registerSuspendedByAdmin(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void registerUpdatedByApp(com.android.server.notification.NotificationRecord,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.NotificationUsageStats: void releaseAggregatedStatsLocked(com.android.server.notification.NotificationUsageStats$AggregatedStats[])>
<com.android.server.notification.PermissionHelper: boolean hasPermission(int)>
<com.android.server.notification.PermissionHelper: boolean hasRequestedPermission(java.lang.String,java.lang.String,int)>
<com.android.server.notification.PermissionHelper: boolean isPermissionFixed(java.lang.String,int)>
<com.android.server.notification.PermissionHelper: boolean isPermissionUserSet(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper$Delegate: boolean isAllowed(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper$PackagePreferences: boolean isValidDelegate(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper$PackagePreferences: void <init>()>
<com.android.server.notification.PreferencesHelper$PackagePreferences: void <init>(com.android.server.notification.PreferencesHelper$PackagePreferences-IA)>
<com.android.server.notification.PreferencesHelper: android.app.NotificationChannel findConversationChannel(com.android.server.notification.PreferencesHelper$PackagePreferences,java.lang.String,java.lang.String,boolean)>
<com.android.server.notification.PreferencesHelper: android.app.NotificationChannel getConversationNotificationChannel(java.lang.String,int,java.lang.String,java.lang.String,boolean,boolean)>
<com.android.server.notification.PreferencesHelper: android.metrics.LogMaker getChannelLog(android.app.NotificationChannel,java.lang.String)>
<com.android.server.notification.PreferencesHelper: boolean channelIsLiveLocked(com.android.server.notification.PreferencesHelper$PackagePreferences,android.app.NotificationChannel)>
<com.android.server.notification.PreferencesHelper: boolean createDefaultChannelIfNeededLocked(com.android.server.notification.PreferencesHelper$PackagePreferences)>
<com.android.server.notification.PreferencesHelper: boolean hasSentValidMsg(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean hasUserDemotedInvalidMsgApp(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean isDelegateAllowed(java.lang.String,int,java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean isGroupBlocked(java.lang.String,int,java.lang.String)>
<com.android.server.notification.PreferencesHelper: boolean isInInvalidMsgState(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean onlyHasDefaultChannel(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean setInvalidMessageSent(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean setValidBubbleSent(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean setValidMessageSent(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: boolean shouldHaveDefaultChannel(com.android.server.notification.PreferencesHelper$PackagePreferences)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getOrCreatePackagePreferencesLocked(java.lang.String,int,int,int,int,int,boolean,int)>
<com.android.server.notification.PreferencesHelper: com.android.server.notification.PreferencesHelper$PackagePreferences getPackagePreferencesLocked(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: int getCurrentUser()>
<com.android.server.notification.PreferencesHelper: java.lang.String packagePreferencesKey(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: java.lang.String unrestoredPackageKey(java.lang.String,int)>
<com.android.server.notification.PreferencesHelper: void lockFieldsForUpdateLocked(android.app.NotificationChannel,android.app.NotificationChannel)>
<com.android.server.notification.PreferencesHelper: void updateChannelsBypassingDnd(int,boolean)>
<com.android.server.notification.PreferencesHelper: void updateConfig()>
<com.android.server.notification.PreferencesHelper: void updateNotificationChannel(java.lang.String,int,android.app.NotificationChannel,boolean,int,boolean)>
<com.android.server.notification.PreferencesHelper: void updateZenPolicy(boolean,int,boolean)>
<com.android.server.notification.RankingHandler: void requestReconsideration(com.android.server.notification.RankingReconsideration)>
<com.android.server.notification.RankingHandler: void requestSort()>
<com.android.server.notification.RankingHelper: int indexOf(java.util.ArrayList,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.RankingHelper: void extractSignals(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.RankingHelper: void sort(java.util.ArrayList)>
<com.android.server.notification.RateEstimator: double getInterarrivalEstimate(long)>
<com.android.server.notification.RateEstimator: float getRate(long)>
<com.android.server.notification.RateEstimator: float update(long)>
<com.android.server.notification.RateEstimator: void <init>()>
<com.android.server.notification.ShortcutHelper: android.content.pm.ShortcutInfo getValidShortcutInfo(java.lang.String,java.lang.String,android.os.UserHandle)>
<com.android.server.notification.ShortcutHelper: boolean isConversationShortcut(android.content.pm.ShortcutInfo,android.content.pm.ShortcutServiceInternal,int)>
<com.android.server.notification.ShortcutHelper: void cacheShortcut(android.content.pm.ShortcutInfo,android.os.UserHandle)>
<com.android.server.notification.ShortcutHelper: void maybeListenForShortcutChangesForBubbles(com.android.server.notification.NotificationRecord,boolean,android.os.Handler)>
<com.android.server.notification.SmallHash: int hash(int)>
<com.android.server.notification.SmallHash: int hash(java.lang.String)>
<com.android.server.notification.SnoozeHelper$$ExternalSyntheticLambda0: void <init>(com.android.server.notification.SnoozeHelper,java.lang.String,long)>
<com.android.server.notification.SnoozeHelper$$ExternalSyntheticLambda0: void run()>
<com.android.server.notification.SnoozeHelper$$ExternalSyntheticLambda1: void <init>(com.android.server.notification.SnoozeHelper,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.SnoozeHelper$$ExternalSyntheticLambda1: void run()>
<com.android.server.notification.SnoozeHelper$Callback: void repost(int,com.android.server.notification.NotificationRecord,boolean)>
<com.android.server.notification.SnoozeHelper: boolean canSnooze(int)>
<com.android.server.notification.SnoozeHelper: boolean isSnoozed(int,java.lang.String,java.lang.String)>
<com.android.server.notification.SnoozeHelper: com.android.server.notification.NotificationRecord getNotification(java.lang.String)>
<com.android.server.notification.SnoozeHelper: java.lang.Long getSnoozeTimeForUnpostedNotification(int,java.lang.String,java.lang.String)>
<com.android.server.notification.SnoozeHelper: java.lang.String getSnoozeContextForUnpostedNotification(int,java.lang.String,java.lang.String)>
<com.android.server.notification.SnoozeHelper: java.lang.String getTrimmedString(java.lang.String)>
<com.android.server.notification.SnoozeHelper: java.util.ArrayList getNotifications(java.lang.String,java.lang.String,java.lang.Integer)>
<com.android.server.notification.SnoozeHelper: void $r8$lambda$6798iM_iGtNfzFyuk78nGja0wyo(com.android.server.notification.SnoozeHelper,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.SnoozeHelper: void lambda$repostGroupSummary$0(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.SnoozeHelper: void repostGroupSummary(java.lang.String,int,java.lang.String)>
<com.android.server.notification.SnoozeHelper: void scheduleRepost(java.lang.String,long)>
<com.android.server.notification.SnoozeHelper: void scheduleRepostAtTime(java.lang.String,long)>
<com.android.server.notification.SnoozeHelper: void snooze(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.SnoozeHelper: void snooze(com.android.server.notification.NotificationRecord,java.lang.String)>
<com.android.server.notification.SnoozeHelper: void snooze(com.android.server.notification.NotificationRecord,long)>
<com.android.server.notification.SnoozeHelper: void update(int,com.android.server.notification.NotificationRecord)>
<com.android.server.notification.SystemConditionProviderService: android.content.ComponentName getComponent()>
<com.android.server.notification.SystemConditionProviderService: android.service.notification.IConditionProvider asInterface()>
<com.android.server.notification.SystemConditionProviderService: boolean isValidConditionId(android.net.Uri)>
<com.android.server.notification.VibratorHelper: android.os.VibrationEffect createDefaultVibration(boolean)>
<com.android.server.notification.VibratorHelper: android.os.VibrationEffect createFallbackVibration(boolean)>
<com.android.server.notification.VibratorHelper: android.os.VibrationEffect createPwleWaveformVibration(float[],boolean)>
<com.android.server.notification.VibratorHelper: android.os.VibrationEffect createWaveformVibration(long[],boolean)>
<com.android.server.notification.VibratorHelper: float[] getFloatArray(android.content.res.Resources,int)>
<com.android.server.notification.VibratorHelper: long[] getLongArray(android.content.res.Resources,int,int,long[])>
<com.android.server.notification.VibratorHelper: void <clinit>()>
<com.android.server.notification.VibratorHelper: void <init>(android.content.Context)>
<com.android.server.notification.VibratorHelper: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes,java.lang.String)>
<com.android.server.notification.ZenLog: void append(int,java.lang.String)>
<com.android.server.notification.ZenLog: void traceConfig(java.lang.String,android.service.notification.ZenModeConfig,android.service.notification.ZenModeConfig)>
<com.android.server.notification.ZenLog: void traceDisableEffects(com.android.server.notification.NotificationRecord,java.lang.String)>
<com.android.server.notification.ZenLog: void traceSetConsolidatedZenPolicy(android.app.NotificationManager$Policy,java.lang.String)>
<com.android.server.notification.ZenLog: void traceSetZenMode(int,java.lang.String)>
<com.android.server.notification.ZenModeConditions: boolean updateSnoozing(android.service.notification.ZenModeConfig$ZenRule)>
<com.android.server.notification.ZenModeConditions: void evaluateConfig(android.service.notification.ZenModeConfig,android.content.ComponentName,boolean)>
<com.android.server.notification.ZenModeConditions: void evaluateRule(android.service.notification.ZenModeConfig$ZenRule,android.util.ArraySet,android.content.ComponentName,boolean)>
<com.android.server.notification.ZenModeEventLogger$ZenModeInfo: void <init>(int,android.service.notification.ZenModeConfig,android.app.NotificationManager$Policy)>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: boolean '-$$Nest$mshouldLogChanges'(com.android.server.notification.ZenModeEventLogger$ZenStateChanges)>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: boolean getAreChannelsBypassing()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: boolean getIsUserAction()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: boolean shouldLogChanges()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: byte[] getDNDPolicyProto()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: com.android.server.notification.ZenModeEventLogger$ZenStateChangedEvent getEventId()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: int getChangedRuleType()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: int getNumRulesActive()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: int getPackageUid()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: void '-$$Nest$minit'(com.android.server.notification.ZenModeEventLogger$ZenStateChanges,com.android.server.notification.ZenModeEventLogger$ZenModeInfo,com.android.server.notification.ZenModeEventLogger$ZenModeInfo,int,boolean)>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: void <init>()>
<com.android.server.notification.ZenModeEventLogger$ZenStateChanges: void init(com.android.server.notification.ZenModeEventLogger$ZenModeInfo,com.android.server.notification.ZenModeEventLogger$ZenModeInfo,int,boolean)>
<com.android.server.notification.ZenModeEventLogger: void logChanges()>
<com.android.server.notification.ZenModeEventLogger: void maybeLogZenChange(com.android.server.notification.ZenModeEventLogger$ZenModeInfo,com.android.server.notification.ZenModeEventLogger$ZenModeInfo,int,boolean)>
<com.android.server.notification.ZenModeEventLogger: void maybeReassignCallingUid()>
<com.android.server.notification.ZenModeFiltering: boolean isCall(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.ZenModeHelper$Callback: void onConfigChanged()>
<com.android.server.notification.ZenModeHelper$Callback: void onPolicyChanged()>
<com.android.server.notification.ZenModeHelper$H: void '-$$Nest$mpostDispatchOnZenModeChanged'(com.android.server.notification.ZenModeHelper$H)>
<com.android.server.notification.ZenModeHelper$H: void '-$$Nest$mpostUpdateRingerAndAudio'(com.android.server.notification.ZenModeHelper$H,boolean)>
<com.android.server.notification.ZenModeHelper: android.app.NotificationManager$Policy getNotificationPolicy()>
<com.android.server.notification.ZenModeHelper: android.app.NotificationManager$Policy getNotificationPolicy(android.service.notification.ZenModeConfig)>
<com.android.server.notification.ZenModeHelper: boolean isCall(com.android.server.notification.NotificationRecord)>
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,android.content.ComponentName,java.lang.String,int,boolean)>
<com.android.server.notification.ZenModeHelper: boolean setConfigLocked(android.service.notification.ZenModeConfig,java.lang.String,android.content.ComponentName,boolean,int,boolean)>
<com.android.server.notification.ZenModeHelper: int computeZenMode()>
<com.android.server.notification.ZenModeHelper: void applyCustomPolicy(android.service.notification.ZenPolicy,android.service.notification.ZenModeConfig$ZenRule)>
<com.android.server.notification.ZenModeHelper: void dispatchOnConfigChanged()>
<com.android.server.notification.ZenModeHelper: void dispatchOnConsolidatedPolicyChanged()>
<com.android.server.notification.ZenModeHelper: void dispatchOnPolicyChanged()>
<com.android.server.notification.ZenModeHelper: void evaluateZenMode(java.lang.String,boolean)>
<com.android.server.notification.ZenModeHelper: void setNotificationPolicy(android.app.NotificationManager$Policy,int,boolean)>
<com.android.server.notification.ZenModeHelper: void setZenModeSetting(int)>
<com.android.server.notification.ZenModeHelper: void updateConfigAndZenModeLocked(android.service.notification.ZenModeConfig,java.lang.String,boolean,int,boolean)>
<com.android.server.notification.ZenModeHelper: void updateConsolidatedPolicy(java.lang.String)>
<com.android.server.uri.UriGrantsManagerInternal: android.os.IBinder newUriPermissionOwner(java.lang.String)>
<com.android.server.uri.UriGrantsManagerInternal: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int,int)>
<java.lang.Boolean: boolean booleanValue()>
<java.lang.CharSequence: java.lang.String toString()>
<java.lang.Character: java.lang.Character valueOf(char)>
<java.lang.Class: java.lang.String getName()>
<java.lang.Float: boolean isNaN(float)>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.Integer: int intValue()>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.lang.Integer: java.lang.String toString(int)>
<java.lang.Iterable: java.util.Iterator iterator()>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.lang.Long: long longValue()>
<java.lang.Math: double max(double,double)>
<java.lang.Math: float abs(float)>
<java.lang.Math: int floorMod(int,int)>
<java.lang.Math: int max(int,int)>
<java.lang.Math: int min(int,int)>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void <init>()>
<java.lang.Runnable: void run()>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.String: boolean isEmpty()>
<java.lang.String: int hashCode()>
<java.lang.String: int length()>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.lang.String: java.lang.String substring(int,int)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: void <init>()>
<java.lang.System: long currentTimeMillis()>
<java.lang.Thread: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.Thread: void sleep(long)>
<java.lang.Thread: void start()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.lang.Throwable: void <init>()>
<java.time.Duration: java.time.Duration ofMillis(long)>
<java.util.ArrayDeque: boolean offer(java.lang.Object)>
<java.util.ArrayDeque: java.lang.Object poll()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.ArrayList: boolean isEmpty()>
<java.util.ArrayList: boolean remove(java.lang.Object)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.util.ArrayList: java.lang.Object remove(int)>
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.ArrayList: java.util.Iterator iterator()>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void <init>(java.util.Collection)>
<java.util.Arrays: boolean equals(long[],long[])>
<java.util.Arrays: java.lang.String toString(float[])>
<java.util.Arrays: java.lang.String toString(long[])>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.util.Collection: java.util.Iterator iterator()>
<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>
<java.util.Collections: java.util.List singletonList(java.lang.Object)>
<java.util.Collections: void sort(java.util.List,java.util.Comparator)>
<java.util.HashMap: boolean isEmpty()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.util.HashMap: java.util.Set keySet()>
<java.util.HashMap: void <init>()>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.util.Iterator: boolean hasNext()>
<java.util.Iterator: java.lang.Object next()>
<java.util.LinkedList: int size()>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.util.LinkedList: void addLast(java.lang.Object)>
<java.util.List: boolean add(java.lang.Object)>
<java.util.List: boolean addAll(java.util.Collection)>
<java.util.List: boolean isEmpty()>
<java.util.List: int size()>
<java.util.List: java.lang.Object get(int)>
<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>
<java.util.List: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
<java.util.Objects: int hashCode(java.lang.Object)>
<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
<java.util.Set: boolean contains(java.lang.Object)>
<java.util.Set: java.util.Iterator iterator()>
<java.util.concurrent.ConcurrentHashMap: void <init>()>

