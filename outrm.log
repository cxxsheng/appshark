<android.animation.LayoutTransition: void enableTransitionType(int)>
<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>
<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: android.app.Application getApplication()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: android.net.Uri getReferrer()>
<android.app.Activity: android.os.IBinder getActivityToken()>
<android.app.Activity: android.os.UserHandle getUser()>
<android.app.Activity: android.view.View findViewById(int)>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: int getUserId()>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: void enableTaskLocaleOverride()>
<android.app.Activity: void finish()>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void setActionBar(android.widget.Toolbar)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: void setTheme(int)>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void startActivity(android.content.Intent)>
<android.app.ActivityManager: android.app.IActivityManager getService()>
<android.app.ActivityManager: boolean isLowRamDevice()>
<android.app.ActivityManager: int getLockTaskModeState()>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.IActivityManager: java.lang.String getLaunchedFromPackage(android.os.IBinder)>
<android.content.BroadcastReceiver: void <init>()>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String toString()>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.Context: int getColor(int)>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>
<android.content.Context: java.lang.String getPackageName()>
<android.content.Context: java.lang.String getString(int)>
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: int getFlags()>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: java.lang.String getPackage()>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.Intent: void removeExtra(java.lang.String)>
<android.content.Intent: void removeFlags(int)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.content.pm.ComponentInfo: android.content.ComponentName getComponentName()>
<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags,int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>
<android.content.pm.UserInfo: boolean isManagedProfile()>
<android.content.pm.UserInfo: boolean isPrivateProfile()>
<android.content.pm.UserProperties: int getShowInQuietMode()>
<android.content.pm.UserProperties: int getShowInSettings()>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.content.res.Resources: float getFloat(int)>
<android.content.res.Resources: int getDimensionPixelSize(int)>
<android.content.res.Resources: int getInteger(int)>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.content.res.TypedArray: int getColor(int,int)>
<android.content.res.TypedArray: void recycle()>
<android.net.Uri$Builder: android.net.Uri build()>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<android.net.Uri$Builder: void <init>()>
<android.net.Uri: java.lang.String getHost()>
<android.net.Uri: java.lang.String getSchemeSpecificPart()>
<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
<android.os.AsyncTask: void execute(java.lang.Runnable)>
<android.os.BaseBundle: int getInt(java.lang.String)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: void <init>()>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.UserHandle: boolean isSameApp(int,int)>
<android.os.UserHandle: int getAppId(int)>
<android.os.UserHandle: int getIdentifier()>
<android.os.UserHandle: int myUserId()>
<android.os.UserHandle: void <init>(int)>
<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>
<android.os.UserManager: android.content.pm.UserProperties getUserProperties(android.os.UserHandle)>
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)>
<android.os.UserManager: java.util.List getUserProfiles()>
<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.safetycenter.SafetyCenterManager: boolean isSafetyCenterEnabled()>
<android.sysprop.SetupWizardProperties: java.util.Optional theme()>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.util.ArraySet: void <init>()>
<android.util.FeatureFlagUtils: boolean isEnabled(android.content.Context,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.view.View: android.view.ViewParent getParent()>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.view.View: boolean requestFocus()>
<android.view.View: float getTranslationZ()>
<android.view.View: void setAllowedHandwritingDelegatePackage(java.lang.String)>
<android.view.View: void setBackground(android.graphics.drawable.Drawable)>
<android.view.View: void setBackgroundColor(int)>
<android.view.View: void setClickable(boolean)>
<android.view.View: void setFocusable(boolean)>
<android.view.View: void setFocusableInTouchMode(boolean)>
<android.view.View: void setHandwritingDelegatorCallback(java.lang.Runnable)>
<android.view.View: void setImportantForAccessibility(int)>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setPaddingRelative(int,int,int,int)>
<android.view.View: void setTranslationZ(float)>
<android.view.View: void setVisibility(int)>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.view.ViewGroup: void removeAllViews()>
<android.view.Window: void addFlags(int)>
<android.view.Window: void setStatusBarColor(int)>
<android.view.Window: void setUiOptions(int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<android.widget.Toolbar: android.view.View getNavigationView()>
<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
<androidx.activity.ComponentActivity: void onBackPressed()>
<androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>
<androidx.activity.ComponentActivity: void setContentView(int)>
<androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams: void setBehavior(androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior)>
<androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
<androidx.core.view.WindowCompat: void setDecorFitsSystemWindows(android.view.Window,boolean)>
<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>
<androidx.fragment.app.FragmentActivity: void <init>()>
<androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>
<androidx.fragment.app.FragmentActivity: void onDestroy()>
<androidx.fragment.app.FragmentActivity: void onPause()>
<androidx.fragment.app.FragmentActivity: void onPostResume()>
<androidx.fragment.app.FragmentActivity: void onResume()>
<androidx.fragment.app.FragmentActivity: void onStart()>
<androidx.fragment.app.FragmentActivity: void onStop()>
<androidx.fragment.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>
<androidx.fragment.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>
<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findFragmentById(int)>
<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>
<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentTransaction beginTransaction()>
<androidx.fragment.app.FragmentManager: boolean executePendingTransactions()>
<androidx.fragment.app.FragmentManager: int getBackStackEntryCount()>
<androidx.fragment.app.FragmentManager: java.util.List getFragments()>
<androidx.fragment.app.FragmentManager: void addOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction add(int,androidx.fragment.app.Fragment)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(int)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction show(androidx.fragment.app.Fragment)>
<androidx.fragment.app.FragmentTransaction: int commit()>
<androidx.fragment.app.FragmentTransaction: int commitAllowingStateLoss()>
<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>
<androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void <init>()>
<androidx.window.embedding.ActivityEmbeddingController: androidx.window.embedding.ActivityEmbeddingController getInstance(android.content.Context)>
<androidx.window.embedding.ActivityEmbeddingController: boolean isActivityEmbedded(android.app.Activity)>
<androidx.window.embedding.ActivityFilter: void <init>(android.content.ComponentName,java.lang.String)>
<androidx.window.embedding.ActivityRule$Builder: androidx.window.embedding.ActivityRule build()>
<androidx.window.embedding.ActivityRule$Builder: androidx.window.embedding.ActivityRule$Builder setAlwaysExpand(boolean)>
<androidx.window.embedding.ActivityRule$Builder: void <init>(java.util.Set)>
<androidx.window.embedding.RuleController: androidx.window.embedding.RuleController getInstance(android.content.Context)>
<androidx.window.embedding.RuleController: void addRule(androidx.window.embedding.EmbeddingRule)>
<androidx.window.embedding.RuleController: void clearRules()>
<androidx.window.embedding.SplitAttributes$Builder: androidx.window.embedding.SplitAttributes build()>
<androidx.window.embedding.SplitAttributes$Builder: androidx.window.embedding.SplitAttributes$Builder setLayoutDirection(androidx.window.embedding.SplitAttributes$LayoutDirection)>
<androidx.window.embedding.SplitAttributes$Builder: androidx.window.embedding.SplitAttributes$Builder setSplitType(androidx.window.embedding.SplitAttributes$SplitType)>
<androidx.window.embedding.SplitAttributes$Builder: void <init>()>
<androidx.window.embedding.SplitAttributes$SplitType: androidx.window.embedding.SplitAttributes$SplitType ratio(float)>
<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance(android.content.Context)>
<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$SplitSupportStatus getSplitSupportStatus()>
<androidx.window.embedding.SplitPairFilter: void <init>(android.content.ComponentName,android.content.ComponentName,java.lang.String)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule build()>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setClearTop(boolean)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setDefaultSplitAttributes(androidx.window.embedding.SplitAttributes)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setFinishPrimaryWithSecondary(androidx.window.embedding.SplitRule$FinishBehavior)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setFinishSecondaryWithPrimary(androidx.window.embedding.SplitRule$FinishBehavior)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setMaxAspectRatioInPortrait(androidx.window.embedding.EmbeddingAspectRatio)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setMinSmallestWidthDp(int)>
<androidx.window.embedding.SplitPairRule$Builder: androidx.window.embedding.SplitPairRule$Builder setMinWidthDp(int)>
<androidx.window.embedding.SplitPairRule$Builder: void <init>(java.util.Set)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule build()>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setDefaultSplitAttributes(androidx.window.embedding.SplitAttributes)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setFinishPrimaryWithPlaceholder(androidx.window.embedding.SplitRule$FinishBehavior)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setMaxAspectRatioInPortrait(androidx.window.embedding.EmbeddingAspectRatio)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setMinSmallestWidthDp(int)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setMinWidthDp(int)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: androidx.window.embedding.SplitPlaceholderRule$Builder setSticky(boolean)>
<androidx.window.embedding.SplitPlaceholderRule$Builder: void <init>(java.util.Set,android.content.Intent)>
<androidx.window.java.embedding.SplitControllerCallbackAdapter: void <init>(androidx.window.embedding.SplitController)>
<androidx.window.java.embedding.SplitControllerCallbackAdapter: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)>
<androidx.window.java.embedding.SplitControllerCallbackAdapter: void removeSplitListener(androidx.core.util.Consumer)>
<com.android.settings.Settings$IccLockSettingsActivity: void <init>()>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda0: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda0: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda1: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda1: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda2: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda2: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda3: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda3: void run()>
<com.android.settings.SettingsActivity$1: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settings.SettingsActivity: android.content.Intent getIntent()>
<com.android.settings.SettingsActivity: boolean '-$$Nest$fgetmBatteryPresent'(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity: boolean isActionBarButtonEnabled(android.content.Intent)>
<com.android.settings.SettingsActivity: boolean isSubSettings(android.content.Intent)>
<com.android.settings.SettingsActivity: boolean isValidFragment(java.lang.String)>
<com.android.settings.SettingsActivity: boolean shouldOverrideContactlessPaymentRouting()>
<com.android.settings.SettingsActivity: boolean shouldShowMultiPaneDeepLink(android.content.Intent)>
<com.android.settings.SettingsActivity: int lookupMetricsCategory()>
<com.android.settings.SettingsActivity: java.lang.String getInitialFragmentName(android.content.Intent)>
<com.android.settings.SettingsActivity: java.lang.String getMetricsTag()>
<com.android.settings.SettingsActivity: java.lang.String getStartingFragmentClass(android.content.Intent)>
<com.android.settings.SettingsActivity: void $r8$lambda$E_PnroIZtSz_wYhGqMKLV9jjnsk(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void $r8$lambda$JC04YxEbvl5XSPEdfoSnk8c_PZs(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void $r8$lambda$SQZHFX48llw8T_LmhXwWMNEeBRI(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void '-$$Nest$fputmBatteryPresent'(com.android.settings.SettingsActivity,boolean)>
<com.android.settings.SettingsActivity: void '-$$Nest$mupdateTilesList'(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity: void <init>()>
<com.android.settings.SettingsActivity: void createUiFromIntent(android.os.Bundle,android.content.Intent)>
<com.android.settings.SettingsActivity: void getMetaData()>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$0(android.view.View)>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$1(android.view.View)>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$2(android.view.View)>
<com.android.settings.SettingsActivity: void launchSettingFragment(java.lang.String,android.content.Intent)>
<com.android.settings.SettingsActivity: void onCreate(android.os.Bundle)>
<com.android.settings.SettingsActivity: void onPause()>
<com.android.settings.SettingsActivity: void onResume()>
<com.android.settings.SettingsActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.settings.SettingsActivity: void overrideContactlessPaymentRouting()>
<com.android.settings.SettingsActivity: void saveState(android.os.Bundle)>
<com.android.settings.SettingsActivity: void setActionBarStatus()>
<com.android.settings.SettingsActivity: void setTitleFromBackStack()>
<com.android.settings.SettingsActivity: void setTitleFromBackStackEntry(androidx.fragment.app.FragmentManager$BackStackEntry)>
<com.android.settings.SettingsActivity: void setTitleFromIntent(android.content.Intent)>
<com.android.settings.SettingsActivity: void switchToFragment(java.lang.String,android.os.Bundle,boolean,int,java.lang.CharSequence)>
<com.android.settings.SettingsActivity: void updateTilesList()>
<com.android.settings.SettingsActivityUtil: boolean launchSpaActivity(android.content.Context,java.lang.String,android.content.Intent)>
<com.android.settings.SettingsActivityUtil: java.lang.String getDestination(java.lang.String,android.content.Intent)>
<com.android.settings.SettingsApplication: void setHomeActivity(com.android.settings.homepage.SettingsHomepageActivity)>
<com.android.settings.SetupWizardUtils: int getTheme(android.content.Context,android.content.Intent)>
<com.android.settings.SetupWizardUtils: java.lang.String getThemeString(android.content.Intent)>
<com.android.settings.Utils$$ExternalSyntheticLambda0: void <init>(androidx.fragment.app.FragmentActivity)>
<com.android.settings.Utils: androidx.fragment.app.Fragment getTargetFragment(android.app.Activity,java.lang.String,android.os.Bundle)>
<com.android.settings.Utils: boolean isBatteryPresent(android.content.Intent)>
<com.android.settings.Utils: boolean isNewTabNeeded(android.app.Activity)>
<com.android.settings.Utils: boolean isPackageEnabled(android.content.Context,java.lang.String)>
<com.android.settings.Utils: void setupEdgeToEdge(androidx.fragment.app.FragmentActivity)>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void <clinit>()>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void <init>(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void addActivityFilter(java.util.Collection,java.lang.Class)>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void addActivityFilter(java.util.Set,android.content.Intent)>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void initRules()>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void registerAlwaysExpandRule()>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void registerHomepagePlaceholderRule()>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void registerTwoPanePairRule(android.content.Context,android.content.ComponentName,android.content.ComponentName,java.lang.String,androidx.window.embedding.SplitRule$FinishBehavior,androidx.window.embedding.SplitRule$FinishBehavior,boolean)>
<com.android.settings.activityembedding.ActivityEmbeddingRulesController: void registerTwoPanePairRuleForSettingsHome(android.content.Context,android.content.ComponentName,java.lang.String,boolean,boolean,boolean)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isAlreadyEmbedded(android.app.Activity)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isEmbeddingActivityEnabled(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isRegularHomepageLayout(android.app.Activity)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isSettingsSplitEnabled(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: float getSplitRatio(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: int getMinCurrentScreenSplitWidthDp(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: int getMinSmallestScreenSplitWidthDp(android.content.Context)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: android.content.Intent getTrampolineIntent(android.content.Intent,java.lang.String)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean isSubProfile(android.content.pm.UserInfo)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean startTrampolineIntent(android.content.Context,android.content.Intent)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean tryStartMultiPaneDeepLink(android.content.Context,android.content.Intent,java.lang.String)>
<com.android.settings.biometrics.fingerprint.FingerprintEnrollActivityClassProvider: com.android.settings.biometrics.fingerprint.FingerprintEnrollActivityClassProvider getInstance()>
<com.android.settings.biometrics.fingerprint.FingerprintEnrollActivityClassProvider: java.lang.Class getDefault()>
<com.android.settings.biometrics.fingerprint.FingerprintEnrollActivityClassProvider: java.lang.Class getInternal()>
<com.android.settings.biometrics.fingerprint.FingerprintFeatureProvider: com.android.settings.biometrics.fingerprint.FingerprintEnrollActivityClassProvider getEnrollActivityClassProvider()>
<com.android.settings.core.CategoryMixin$PackageReceiver: void <init>(com.android.settings.core.CategoryMixin)>
<com.android.settings.core.CategoryMixin$PackageReceiver: void <init>(com.android.settings.core.CategoryMixin,com.android.settings.core.CategoryMixin-IA)>
<com.android.settings.core.CategoryMixin$PackageReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settings.core.CategoryMixin: void '-$$Nest$mupdateCategories'(com.android.settings.core.CategoryMixin,boolean)>
<com.android.settings.core.CategoryMixin: void <init>(android.content.Context)>
<com.android.settings.core.CategoryMixin: void updateCategories(boolean)>
<com.android.settings.core.SettingsBaseActivity$$ExternalSyntheticLambda0: void <init>()>
<com.android.settings.core.SettingsBaseActivity$1: void <init>(com.android.settings.core.SettingsBaseActivity)>
<com.android.settings.core.SettingsBaseActivity: boolean isLockTaskModePinned()>
<com.android.settings.core.SettingsBaseActivity: boolean isSettingsRunOnTop()>
<com.android.settings.core.SettingsBaseActivity: boolean isToolbarEnabled()>
<com.android.settings.core.SettingsBaseActivity: int getTransitionType(android.content.Intent)>
<com.android.settings.core.SettingsBaseActivity: void <init>()>
<com.android.settings.core.SettingsBaseActivity: void autoSetCollapsingToolbarLayoutScrolling()>
<com.android.settings.core.SettingsBaseActivity: void hideInternalActionBar()>
<com.android.settings.core.SettingsBaseActivity: void onCreate(android.os.Bundle)>
<com.android.settings.core.SettingsBaseActivity: void onPause()>
<com.android.settings.core.SettingsBaseActivity: void setActionBar(android.widget.Toolbar)>
<com.android.settings.core.SettingsBaseActivity: void setContentView(int)>
<com.android.settings.core.SettingsBaseActivity: void setTitle(int)>
<com.android.settings.core.SettingsBaseActivity: void setTitle(java.lang.CharSequence)>
<com.android.settings.dashboard.suggestions.SuggestionFeatureProvider: java.lang.Class getSuggestionFragment()>
<com.android.settings.dashboard.suggestions.SuggestionFeatureProviderImpl: java.lang.Class getSuggestionFragment()>
<com.android.settings.homepage.DeepLinkHomepageActivityInternal: void <init>()>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda0: androidx.fragment.app.Fragment create()>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda0: void <init>()>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda1: androidx.fragment.app.Fragment create()>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda1: void <init>(java.lang.String)>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda2: void <init>(com.android.settings.homepage.SettingsHomepageActivity)>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda3: void <init>()>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda4: void <init>(com.android.settings.homepage.SettingsHomepageActivity)>
<com.android.settings.homepage.SettingsHomepageActivity$$ExternalSyntheticLambda4: void run()>
<com.android.settings.homepage.SettingsHomepageActivity$SplitInfoCallback: void <init>(com.android.settings.homepage.SettingsHomepageActivity)>
<com.android.settings.homepage.SettingsHomepageActivity$SuggestionFragCreator: androidx.fragment.app.Fragment create()>
<com.android.settings.homepage.SettingsHomepageActivity$SuggestionFragCreator: void <init>(java.lang.Class,boolean)>
<com.android.settings.homepage.SettingsHomepageActivity$SuggestionFragCreator: void init(androidx.fragment.app.Fragment)>
<com.android.settings.homepage.SettingsHomepageActivity: androidx.fragment.app.Fragment showFragment(com.android.settings.homepage.SettingsHomepageActivity$FragmentCreator,int)>
<com.android.settings.homepage.SettingsHomepageActivity: boolean hasPrivilegedAccess(java.lang.String,int,java.lang.String)>
<com.android.settings.homepage.SettingsHomepageActivity: boolean isCallingAppPermitted(java.lang.String,int)>
<com.android.settings.homepage.SettingsHomepageActivity: boolean shouldLaunchDeepLinkIntentToRight()>
<com.android.settings.homepage.SettingsHomepageActivity: java.lang.String getCurrentReferrer()>
<com.android.settings.homepage.SettingsHomepageActivity: java.lang.String getHighlightMenuKey()>
<com.android.settings.homepage.SettingsHomepageActivity: java.lang.String getInitialReferrer()>
<com.android.settings.homepage.SettingsHomepageActivity: java.lang.String maybeRemapMenuKey(java.lang.String)>
<com.android.settings.homepage.SettingsHomepageActivity: void $r8$lambda$mQTY1nsvNUSNNniqw7jXEtD7_uE(com.android.settings.homepage.SettingsHomepageActivity)>
<com.android.settings.homepage.SettingsHomepageActivity: void <clinit>()>
<com.android.settings.homepage.SettingsHomepageActivity: void <init>()>
<com.android.settings.homepage.SettingsHomepageActivity: void initAvatarView()>
<com.android.settings.homepage.SettingsHomepageActivity: void initHomepageContainer()>
<com.android.settings.homepage.SettingsHomepageActivity: void initSearchBarView()>
<com.android.settings.homepage.SettingsHomepageActivity: void initSplitPairRules()>
<com.android.settings.homepage.SettingsHomepageActivity: void lambda$showSuggestionFragment$5()>
<com.android.settings.homepage.SettingsHomepageActivity: void launchDeepLinkIntentToRight()>
<com.android.settings.homepage.SettingsHomepageActivity: void onCreate(android.os.Bundle)>
<com.android.settings.homepage.SettingsHomepageActivity: void onStart()>
<com.android.settings.homepage.SettingsHomepageActivity: void onStop()>
<com.android.settings.homepage.SettingsHomepageActivity: void setupEdgeToEdge()>
<com.android.settings.homepage.SettingsHomepageActivity: void showHomepageWithSuggestion(boolean)>
<com.android.settings.homepage.SettingsHomepageActivity: void showSuggestionFragment(boolean)>
<com.android.settings.homepage.SettingsHomepageActivity: void updateAppBarMinHeight()>
<com.android.settings.homepage.SettingsHomepageActivity: void updateHomepageAppBar()>
<com.android.settings.homepage.SettingsHomepageActivity: void updateHomepageBackground()>
<com.android.settings.homepage.SettingsHomepageActivity: void updateHomepagePaddings()>
<com.android.settings.homepage.SettingsHomepageActivity: void updateSplitLayout()>
<com.android.settings.homepage.SplitLayoutListener: void setSplitLayoutSupported(boolean)>
<com.android.settings.overlay.FeatureFactory$Companion: com.android.settings.overlay.FeatureFactory getFeatureFactory()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.biometrics.fingerprint.FingerprintFeatureProvider getFingerprintFeatureProvider()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.dashboard.DashboardFeatureProvider getDashboardFeatureProvider()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.dashboard.suggestions.SuggestionFeatureProvider getSuggestionFeatureProvider()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.overlay.FeatureFactory access$get_factory$cp()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.overlay.FeatureFactory getFeatureFactory()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.search.SearchFeatureProvider getSearchFeatureProvider()>
<com.android.settings.password.PasswordUtils: java.lang.String getCallingAppPackageName(android.os.IBinder)>
<com.android.settings.safetycenter.SafetyCenterManagerWrapper: boolean isEnabled(android.content.Context)>
<com.android.settings.safetycenter.SafetyCenterManagerWrapper: com.android.settings.safetycenter.SafetyCenterManagerWrapper get()>
<com.android.settings.safetycenter.SafetyCenterManagerWrapper: void <init>()>
<com.android.settings.search.SearchFeatureProvider$$ExternalSyntheticLambda0: void <init>(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent)>
<com.android.settings.search.SearchFeatureProvider$$ExternalSyntheticLambda0: void onClick(android.view.View)>
<com.android.settings.search.SearchFeatureProvider$$ExternalSyntheticLambda1: void <init>(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent)>
<com.android.settings.search.SearchFeatureProvider$$ExternalSyntheticLambda1: void run()>
<com.android.settings.search.SearchFeatureProvider: android.content.Intent buildSearchIntent(android.content.Context,int)>
<com.android.settings.search.SearchFeatureProvider: java.lang.String getSettingsIntelligencePkgName(android.content.Context)>
<com.android.settings.search.SearchFeatureProvider: void $r8$lambda$HTqEyU-ZDsbhJptYN-BUnS6mjZc(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent)>
<com.android.settings.search.SearchFeatureProvider: void $r8$lambda$bnSU10t_-kV51MgNLtKtNRTz8Is(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent,android.view.View)>
<com.android.settings.search.SearchFeatureProvider: void initSearchToolbar(androidx.fragment.app.FragmentActivity,android.view.View,int)>
<com.android.settings.search.SearchFeatureProvider: void lambda$initSearchToolbar$0(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent,android.view.View)>
<com.android.settings.search.SearchFeatureProvider: void lambda$initSearchToolbar$1(android.content.Context,androidx.fragment.app.FragmentActivity,int,android.content.Intent)>
<com.android.settings.search.SearchFeatureProviderImpl$Companion: android.net.Uri access$buildReferrer(com.android.settings.search.SearchFeatureProviderImpl$Companion,android.content.Context,int)>
<com.android.settings.search.SearchFeatureProviderImpl$Companion: android.net.Uri buildReferrer(android.content.Context,int)>
<com.android.settings.search.SearchFeatureProviderImpl: android.content.Intent buildSearchIntent(android.content.Context,int)>
<com.android.settings.spa.SpaActivity$Companion: void startSpaActivity(android.content.Context,java.lang.String)>
<com.android.settings.spa.SpaAppBridgeActivity$Companion: java.lang.String getDestinationForApp(java.lang.String,android.content.Intent)>
<com.android.settings.widget.SettingsMainSwitchBar: void setMetricsCategory(int)>
<com.android.settingslib.Utils: int getColorAttrDefaultColor(android.content.Context,int)>
<com.android.settingslib.Utils: int getColorAttrDefaultColor(android.content.Context,int,int)>
<com.android.settingslib.activityembedding.ActivityEmbeddingUtils: boolean isActivityEmbedded(android.app.Activity)>
<com.android.settingslib.activityembedding.ActivityEmbeddingUtils: boolean shouldHideNavigateUpButton(android.app.Activity,boolean)>
<com.android.settingslib.core.instrumentation.Instrumentable: int getMetricsCategory()>
<com.android.settingslib.core.lifecycle.HideNonSystemOverlayMixin: void <init>(android.app.Activity)>
<com.android.settingslib.spa.framework.util.SpaIntentKt: android.content.Intent appendSpaParams$default(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<com.android.settingslib.spaprivileged.framework.common.ContextsKt: android.os.UserManager getUserManager(android.content.Context)>
<com.google.android.material.appbar.AppBarLayout$Behavior$DragCallback: void <init>()>
<com.google.android.material.appbar.AppBarLayout$Behavior: void <init>()>
<com.google.android.material.appbar.AppBarLayout$Behavior: void setDragCallback(com.google.android.material.appbar.AppBarLayout$BaseBehavior$BaseDragCallback)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setHyphenationFrequency(int)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setLineSpacingMultiplier(float)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setStaticLayoutBuilderConfigurer(com.google.android.material.appbar.CollapsingToolbarLayout$StaticLayoutBuilderConfigurer)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setTitle(java.lang.CharSequence)>
<com.google.android.material.resources.TextAppearanceConfig: void setShouldLoadFontSynchronously(boolean)>
<com.google.android.setupcompat.util.WizardManagerHelper: boolean isAnySetupWizard(android.content.Intent)>
<com.google.android.setupcompat.util.WizardManagerHelper: boolean isDeviceProvisioned(android.content.Context)>
<com.google.android.setupcompat.util.WizardManagerHelper: boolean isUserSetupComplete(android.content.Context)>
<com.google.android.setupdesign.transition.TransitionHelper: void applyBackwardTransition(android.app.Activity)>
<com.google.android.setupdesign.transition.TransitionHelper: void applyForwardTransition(android.app.Activity)>
<com.google.android.setupdesign.util.ThemeHelper: boolean isSetupWizardDayNightEnabled(android.content.Context)>
<com.google.android.setupdesign.util.ThemeHelper: boolean trySetDynamicColor(android.content.Context)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.lang.CharSequence: int length()>
<java.lang.Class: java.lang.String getName()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: int hashCode()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void <init>()>
<java.lang.String: java.lang.String valueOf(int)>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: void <init>()>
<java.lang.System: long currentTimeMillis()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void clear()>
<java.util.Collection: boolean add(java.lang.Object)>
<java.util.HashSet: void <init>()>
<java.util.Iterator: boolean hasNext()>
<java.util.Iterator: java.lang.Object next()>
<java.util.List: boolean isEmpty()>
<java.util.List: java.lang.Object get(int)>
<java.util.List: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Optional: java.lang.Object orElse(java.lang.Object)>
<java.util.Set: boolean add(java.lang.Object)>
<java.util.Set: void clear()>

