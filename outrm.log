<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>
<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.app.Activity: android.app.ActionBar getActionBar()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.app.Activity: android.content.Intent getIntent()>
<android.app.Activity: android.os.IBinder getActivityToken()>
<android.app.Activity: android.os.UserHandle getUser()>
<android.app.Activity: android.view.View findViewById(int)>
<android.app.Activity: android.view.Window getWindow()>
<android.app.Activity: boolean isFinishing()>
<android.app.Activity: boolean isTaskRoot()>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.Activity: java.lang.CharSequence getTitle()>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<android.app.Activity: void finish()>
<android.app.Activity: void finishAndRemoveTask()>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.app.Activity: void onRestart()>
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>
<android.app.Activity: void overridePendingTransition(int,int)>
<android.app.Activity: void setActionBar(android.widget.Toolbar)>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.app.Activity: void setTheme(int)>
<android.app.Activity: void setTitle(java.lang.CharSequence)>
<android.app.Activity: void startActivity(android.content.Intent)>
<android.app.ActivityManager: android.app.IActivityManager getService()>
<android.app.ActivityManager: int getLockTaskModeState()>
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.IActivityManager: java.lang.String getLaunchedFromPackage(android.os.IBinder)>
<android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>
<android.app.usage.IUsageStatsManager$Stub: android.app.usage.IUsageStatsManager asInterface(android.os.IBinder)>
<android.content.BroadcastReceiver: void <init>()>
<android.content.ComponentName: java.lang.String getClassName()>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.content.ComponentName: java.lang.String toString()>
<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>
<android.content.Context: android.content.res.Resources getResources()>
<android.content.Context: android.content.res.Resources$Theme getTheme()>
<android.content.Context: java.lang.CharSequence getText(int)>
<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>
<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.content.Intent: android.content.Intent addFlags(int)>
<android.content.Intent: android.content.Intent getSelector()>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>
<android.content.Intent: android.net.Uri getData()>
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>
<android.content.Intent: android.os.Bundle getExtras()>
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>
<android.content.Intent: boolean hasExtra(java.lang.String)>
<android.content.Intent: int getFlags()>
<android.content.Intent: int getIntExtra(java.lang.String,int)>
<android.content.Intent: java.lang.String getAction()>
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>
<android.content.Intent: java.lang.String toUri(int)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.content.Intent: void <init>(android.content.Intent)>
<android.content.Intent: void <init>(java.lang.String)>
<android.content.Intent: void setSelector(android.content.Intent)>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>
<android.content.pm.UserInfo: boolean isManagedProfile()>
<android.content.pm.UserInfo: boolean isPrivateProfile()>
<android.content.pm.UserProperties: int getShowInQuietMode()>
<android.content.pm.UserProperties: int getShowInSettings()>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.content.res.Resources$Theme: void rebase()>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<android.content.res.Resources: java.lang.CharSequence getText(int)>
<android.content.res.TypedArray: boolean getBoolean(int,boolean)>
<android.net.Uri: java.lang.String getSchemeSpecificPart()>
<android.os.AsyncTask: void execute(java.lang.Runnable)>
<android.os.BaseBundle: int getInt(java.lang.String)>
<android.os.BaseBundle: java.lang.String getString(java.lang.String)>
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>
<android.os.Bundle: void <init>()>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>
<android.os.Bundle: void remove(java.lang.String)>
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>
<android.os.UserHandle: int getIdentifier()>
<android.os.UserHandle: int myUserId()>
<android.os.UserHandle: void <init>(int)>
<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>
<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>
<android.os.UserManager: android.content.pm.UserProperties getUserProperties(android.os.UserHandle)>
<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)>
<android.os.UserManager: java.util.List getUserProfiles()>
<android.sysprop.SetupWizardProperties: java.util.Optional theme()>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.util.ArrayMap: void <init>()>
<android.util.FeatureFlagUtils: boolean isEnabled(android.content.Context,java.lang.String)>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.view.View: float getTranslationZ()>
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
<android.view.View: void setTranslationZ(float)>
<android.view.View: void setVisibility(int)>
<android.view.ViewGroup: void removeAllViews()>
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.view.Window: android.view.View getDecorView()>
<android.view.Window: void setGravity(int)>
<android.view.Window: void setLayout(int,int)>
<android.view.Window: void setUiOptions(int)>
<android.widget.TextView: void setText(java.lang.CharSequence)>
<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
<androidx.activity.ComponentActivity: void onBackPressed()>
<androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>
<androidx.activity.ComponentActivity: void setContentView(int)>
<androidx.coordinatorlayout.widget.CoordinatorLayout$LayoutParams: void setBehavior(androidx.coordinatorlayout.widget.CoordinatorLayout$Behavior)>
<androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsControllerCompat getWindowInsetsController(android.view.View)>
<androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
<androidx.core.view.WindowInsetsControllerCompat: void setAppearanceLightNavigationBars(boolean)>
<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity getActivity()>
<androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)>
<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>
<androidx.fragment.app.FragmentActivity: void <init>()>
<androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>
<androidx.fragment.app.FragmentActivity: void onDestroy()>
<androidx.fragment.app.FragmentActivity: void onPause()>
<androidx.fragment.app.FragmentActivity: void onPostResume()>
<androidx.fragment.app.FragmentActivity: void onResume()>
<androidx.fragment.app.FragmentActivity: void onStart()>
<androidx.fragment.app.FragmentActivity: void onStop()>
<androidx.fragment.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>
<androidx.fragment.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>
<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>
<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentTransaction beginTransaction()>
<androidx.fragment.app.FragmentManager: boolean executePendingTransactions()>
<androidx.fragment.app.FragmentManager: int getBackStackEntryCount()>
<androidx.fragment.app.FragmentManager: void addOnBackStackChangedListener(androidx.fragment.app.FragmentManager$OnBackStackChangedListener)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction replace(int,androidx.fragment.app.Fragment)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(int)>
<androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>
<androidx.fragment.app.FragmentTransaction: int commit()>
<androidx.fragment.app.FragmentTransaction: int commitAllowingStateLoss()>
<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>
<androidx.window.embedding.ActivityEmbeddingController: androidx.window.embedding.ActivityEmbeddingController getInstance(android.content.Context)>
<androidx.window.embedding.ActivityEmbeddingController: boolean isActivityEmbedded(android.app.Activity)>
<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance(android.content.Context)>
<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$SplitSupportStatus getSplitSupportStatus()>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda0: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda0: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda1: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda1: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda2: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda2: void onClick(android.view.View)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda3: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$$ExternalSyntheticLambda3: void run()>
<com.android.settings.SettingsActivity$1: void <init>(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settings.SettingsActivity: android.content.Intent getIntent()>
<com.android.settings.SettingsActivity: boolean '-$$Nest$fgetmBatteryPresent'(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity: boolean isActionBarButtonEnabled(android.content.Intent)>
<com.android.settings.SettingsActivity: boolean isSubSettings(android.content.Intent)>
<com.android.settings.SettingsActivity: boolean shouldOverrideContactlessPaymentRouting()>
<com.android.settings.SettingsActivity: boolean shouldShowMultiPaneDeepLink(android.content.Intent)>
<com.android.settings.SettingsActivity: int lookupMetricsCategory()>
<com.android.settings.SettingsActivity: java.lang.String getInitialFragmentName(android.content.Intent)>
<com.android.settings.SettingsActivity: java.lang.String getMetricsTag()>
<com.android.settings.SettingsActivity: java.lang.String getStartingFragmentClass(android.content.Intent)>
<com.android.settings.SettingsActivity: void $r8$lambda$E_PnroIZtSz_wYhGqMKLV9jjnsk(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void $r8$lambda$JC04YxEbvl5XSPEdfoSnk8c_PZs(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void $r8$lambda$SQZHFX48llw8T_LmhXwWMNEeBRI(com.android.settings.SettingsActivity,android.view.View)>
<com.android.settings.SettingsActivity: void '-$$Nest$fputmBatteryPresent'(com.android.settings.SettingsActivity,boolean)>
<com.android.settings.SettingsActivity: void '-$$Nest$mupdateTilesList'(com.android.settings.SettingsActivity)>
<com.android.settings.SettingsActivity: void <init>()>
<com.android.settings.SettingsActivity: void createUiFromIntent(android.os.Bundle,android.content.Intent)>
<com.android.settings.SettingsActivity: void getMetaData()>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$0(android.view.View)>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$1(android.view.View)>
<com.android.settings.SettingsActivity: void lambda$createUiFromIntent$2(android.view.View)>
<com.android.settings.SettingsActivity: void launchSettingFragment(java.lang.String,android.content.Intent)>
<com.android.settings.SettingsActivity: void onCreate(android.os.Bundle)>
<com.android.settings.SettingsActivity: void onPause()>
<com.android.settings.SettingsActivity: void onResume()>
<com.android.settings.SettingsActivity: void onSaveInstanceState(android.os.Bundle)>
<com.android.settings.SettingsActivity: void overrideContactlessPaymentRouting()>
<com.android.settings.SettingsActivity: void saveState(android.os.Bundle)>
<com.android.settings.SettingsActivity: void setActionBarStatus()>
<com.android.settings.SettingsActivity: void setTitleFromBackStack()>
<com.android.settings.SettingsActivity: void setTitleFromBackStackEntry(androidx.fragment.app.FragmentManager$BackStackEntry)>
<com.android.settings.SettingsActivity: void setTitleFromIntent(android.content.Intent)>
<com.android.settings.SettingsActivity: void switchToFragment(java.lang.String,android.os.Bundle,boolean,int,java.lang.CharSequence)>
<com.android.settings.SettingsActivity: void updateTilesList()>
<com.android.settings.SettingsActivityUtil: boolean launchSpaActivity(android.content.Context,java.lang.String,android.content.Intent)>
<com.android.settings.SettingsActivityUtil: java.lang.String getDestination(java.lang.String,android.content.Intent)>
<com.android.settings.SettingsPreferenceFragment: void <init>()>
<com.android.settings.SetupWizardUtils: int getTheme(android.content.Context,android.content.Intent)>
<com.android.settings.SetupWizardUtils: java.lang.String getThemeString(android.content.Intent)>
<com.android.settings.SubSettings: boolean isValidFragment(java.lang.String)>
<com.android.settings.SubSettings: void <init>()>
<com.android.settings.Utils$$ExternalSyntheticLambda0: void <init>(androidx.fragment.app.FragmentActivity)>
<com.android.settings.Utils: androidx.fragment.app.Fragment getTargetFragment(android.app.Activity,java.lang.String,android.os.Bundle)>
<com.android.settings.Utils: boolean isBatteryPresent(android.content.Intent)>
<com.android.settings.Utils: boolean isNewTabNeeded(android.app.Activity)>
<com.android.settings.Utils: boolean isNightMode(android.content.Context)>
<com.android.settings.Utils: void setupEdgeToEdge(androidx.fragment.app.FragmentActivity)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isEmbeddingActivityEnabled(android.content.Context)>
<com.android.settings.activityembedding.ActivityEmbeddingUtils: boolean isSettingsSplitEnabled(android.content.Context)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: android.content.Intent getTrampolineIntent(android.content.Intent,java.lang.String)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean isSubProfile(android.content.pm.UserInfo)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean startTrampolineIntent(android.content.Context,android.content.Intent)>
<com.android.settings.activityembedding.EmbeddedDeepLinkUtils: boolean tryStartMultiPaneDeepLink(android.content.Context,android.content.Intent,java.lang.String)>
<com.android.settings.core.CategoryMixin$PackageReceiver: void <init>(com.android.settings.core.CategoryMixin)>
<com.android.settings.core.CategoryMixin$PackageReceiver: void <init>(com.android.settings.core.CategoryMixin,com.android.settings.core.CategoryMixin-IA)>
<com.android.settings.core.CategoryMixin$PackageReceiver: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settings.core.CategoryMixin: void '-$$Nest$mupdateCategories'(com.android.settings.core.CategoryMixin,boolean)>
<com.android.settings.core.CategoryMixin: void <init>(android.content.Context)>
<com.android.settings.core.InstrumentedPreferenceFragment: void <init>()>
<com.android.settings.core.SettingsBaseActivity$$ExternalSyntheticLambda0: void <init>()>
<com.android.settings.core.SettingsBaseActivity$1: void <init>(com.android.settings.core.SettingsBaseActivity)>
<com.android.settings.core.SettingsBaseActivity: boolean isLockTaskModePinned()>
<com.android.settings.core.SettingsBaseActivity: boolean isSettingsRunOnTop()>
<com.android.settings.core.SettingsBaseActivity: boolean isToolbarEnabled()>
<com.android.settings.core.SettingsBaseActivity: int getTransitionType(android.content.Intent)>
<com.android.settings.core.SettingsBaseActivity: void <init>()>
<com.android.settings.core.SettingsBaseActivity: void autoSetCollapsingToolbarLayoutScrolling()>
<com.android.settings.core.SettingsBaseActivity: void hideInternalActionBar()>
<com.android.settings.core.SettingsBaseActivity: void onCreate(android.os.Bundle)>
<com.android.settings.core.SettingsBaseActivity: void onPause()>
<com.android.settings.core.SettingsBaseActivity: void setActionBar(android.widget.Toolbar)>
<com.android.settings.core.SettingsBaseActivity: void setContentView(int)>
<com.android.settings.core.SettingsBaseActivity: void setTitle(int)>
<com.android.settings.core.SettingsBaseActivity: void setTitle(java.lang.CharSequence)>
<com.android.settings.core.SubSettingLauncher$LaunchRequest: void <init>()>
<com.android.settings.core.SubSettingLauncher: android.content.Intent toIntent()>
<com.android.settings.core.SubSettingLauncher: com.android.settings.core.SubSettingLauncher setDestination(java.lang.String)>
<com.android.settings.core.SubSettingLauncher: com.android.settings.core.SubSettingLauncher setExtras(android.os.Bundle)>
<com.android.settings.core.SubSettingLauncher: com.android.settings.core.SubSettingLauncher setSourceMetricsCategory(int)>
<com.android.settings.core.SubSettingLauncher: void <init>(android.content.Context)>
<com.android.settings.core.SubSettingLauncher: void copyExtras(android.content.Intent)>
<com.android.settings.dashboard.DashboardFragment: void <init>()>
<com.android.settings.notification.NotificationBackend: void <clinit>()>
<com.android.settings.notification.NotificationBackend: void <init>()>
<com.android.settings.notification.app.ChannelNotificationSettings: void <init>()>
<com.android.settings.notification.app.ChannelPanelActivity$$ExternalSyntheticLambda0: void <init>(com.android.settings.notification.app.ChannelPanelActivity)>
<com.android.settings.notification.app.ChannelPanelActivity$$ExternalSyntheticLambda0: void onClick(android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity$$ExternalSyntheticLambda1: void <init>(com.android.settings.notification.app.ChannelPanelActivity)>
<com.android.settings.notification.app.ChannelPanelActivity$$ExternalSyntheticLambda1: void onClick(android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity$$ExternalSyntheticLambda2: void <init>()>
<com.android.settings.notification.app.ChannelPanelActivity: void $r8$lambda$bDQp2ljgykU-POrRxWfB0xWfs_s(com.android.settings.notification.app.ChannelPanelActivity,android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity: void $r8$lambda$iv50w5-FGps8jLJSspWvXXFtofs(com.android.settings.notification.app.ChannelPanelActivity,android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity: void <init>()>
<com.android.settings.notification.app.ChannelPanelActivity: void createOrUpdatePanel()>
<com.android.settings.notification.app.ChannelPanelActivity: void lambda$createOrUpdatePanel$0(android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity: void lambda$createOrUpdatePanel$1(android.view.View)>
<com.android.settings.notification.app.ChannelPanelActivity: void launchFullSettings()>
<com.android.settings.notification.app.ChannelPanelActivity: void onCreate(android.os.Bundle)>
<com.android.settings.notification.app.ChannelPanelActivity: void setupNavigationBar()>
<com.android.settings.notification.app.ConversationNotificationSettings: void <init>()>
<com.android.settings.notification.app.NotificationSettings$1: void <init>(com.android.settings.notification.app.NotificationSettings)>
<com.android.settings.notification.app.NotificationSettings$1: void onGlobalLayout()>
<com.android.settings.notification.app.NotificationSettings$2: void <init>(com.android.settings.notification.app.NotificationSettings)>
<com.android.settings.notification.app.NotificationSettings$2: void onReceive(android.content.Context,android.content.Intent)>
<com.android.settings.notification.app.NotificationSettings$DependentFieldListener: void <init>(com.android.settings.notification.app.NotificationSettings)>
<com.android.settings.notification.app.NotificationSettings: android.view.ViewGroup '-$$Nest$fgetmLayoutView'(com.android.settings.notification.app.NotificationSettings)>
<com.android.settings.notification.app.NotificationSettings: boolean '-$$Nest$sfgetDEBUG'()>
<com.android.settings.notification.app.NotificationSettings: void '-$$Nest$manimateIn'(com.android.settings.notification.app.NotificationSettings)>
<com.android.settings.notification.app.NotificationSettings: void <init>()>
<com.android.settings.notification.app.NotificationSettings: void animateIn()>
<com.android.settings.notification.app.NotificationSettings: void onPackageRemoved()>
<com.android.settings.overlay.FeatureFactory$Companion: com.android.settings.overlay.FeatureFactory getFeatureFactory()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.dashboard.DashboardFeatureProvider getDashboardFeatureProvider()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.overlay.FeatureFactory access$get_factory$cp()>
<com.android.settings.overlay.FeatureFactory: com.android.settings.overlay.FeatureFactory getFeatureFactory()>
<com.android.settings.password.PasswordUtils: java.lang.String getCallingAppPackageName(android.os.IBinder)>
<com.android.settings.spa.SpaActivity$Companion: void startSpaActivity(android.content.Context,java.lang.String)>
<com.android.settings.spa.SpaAppBridgeActivity$Companion: java.lang.String getDestinationForApp(java.lang.String,android.content.Intent)>
<com.android.settings.widget.SettingsMainSwitchBar: void setMetricsCategory(int)>
<com.android.settingslib.activityembedding.ActivityEmbeddingUtils: boolean isActivityEmbedded(android.app.Activity)>
<com.android.settingslib.activityembedding.ActivityEmbeddingUtils: boolean shouldHideNavigateUpButton(android.app.Activity,boolean)>
<com.android.settingslib.core.instrumentation.Instrumentable: int getMetricsCategory()>
<com.android.settingslib.core.lifecycle.HideNonSystemOverlayMixin: void <init>(android.app.Activity)>
<com.android.settingslib.spa.framework.util.SpaIntentKt: android.content.Intent appendSpaParams$default(android.content.Intent,java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>
<com.android.settingslib.spaprivileged.framework.common.ContextsKt: android.os.UserManager getUserManager(android.content.Context)>
<com.google.android.material.appbar.AppBarLayout$Behavior$DragCallback: void <init>()>
<com.google.android.material.appbar.AppBarLayout$Behavior: void <init>()>
<com.google.android.material.appbar.AppBarLayout$Behavior: void setDragCallback(com.google.android.material.appbar.AppBarLayout$BaseBehavior$BaseDragCallback)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setHyphenationFrequency(int)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setLineSpacingMultiplier(float)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setStaticLayoutBuilderConfigurer(com.google.android.material.appbar.CollapsingToolbarLayout$StaticLayoutBuilderConfigurer)>
<com.google.android.material.appbar.CollapsingToolbarLayout: void setTitle(java.lang.CharSequence)>
<com.google.android.material.resources.TextAppearanceConfig: void setShouldLoadFontSynchronously(boolean)>
<com.google.android.setupcompat.util.WizardManagerHelper: boolean isAnySetupWizard(android.content.Intent)>
<com.google.android.setupcompat.util.WizardManagerHelper: boolean isUserSetupComplete(android.content.Context)>
<com.google.android.setupdesign.transition.TransitionHelper: void applyBackwardTransition(android.app.Activity)>
<com.google.android.setupdesign.transition.TransitionHelper: void applyForwardTransition(android.app.Activity)>
<com.google.android.setupdesign.util.ThemeHelper: boolean isSetupWizardDayNightEnabled(android.content.Context)>
<com.google.android.setupdesign.util.ThemeHelper: boolean trySetDynamicColor(android.content.Context)>
<java.lang.CharSequence: int length()>
<java.lang.Class: java.lang.String getName()>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<java.lang.Object: boolean equals(java.lang.Object)>
<java.lang.Object: int hashCode()>
<java.lang.Object: java.lang.Class getClass()>
<java.lang.Object: void <init>()>
<java.lang.StringBuilder: java.lang.String toString()>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.StringBuilder: void <init>()>
<java.lang.System: long currentTimeMillis()>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.util.ArrayList: boolean addAll(java.util.Collection)>
<java.util.ArrayList: int size()>
<java.util.ArrayList: void <init>()>
<java.util.ArrayList: void clear()>
<java.util.Iterator: boolean hasNext()>
<java.util.Iterator: java.lang.Object next()>
<java.util.List: java.lang.Object get(int)>
<java.util.List: java.util.Iterator iterator()>
<java.util.Map: java.lang.Object get(java.lang.Object)>
<java.util.Optional: java.lang.Object orElse(java.lang.Object)>

